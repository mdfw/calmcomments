/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _http = __webpack_require__(1);\n\nvar _serveFavicon = __webpack_require__(2);\n\nvar _serveFavicon2 = _interopRequireDefault(_serveFavicon);\n\nvar _bodyParser = __webpack_require__(3);\n\nvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\nvar _express = __webpack_require__(4);\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _expressSession = __webpack_require__(5);\n\nvar _expressSession2 = _interopRequireDefault(_expressSession);\n\nvar _morgan = __webpack_require__(6);\n\nvar _morgan2 = _interopRequireDefault(_morgan);\n\nvar _passport = __webpack_require__(7);\n\nvar _passport2 = _interopRequireDefault(_passport);\n\nvar _socket = __webpack_require__(8);\n\nvar _socket2 = _interopRequireDefault(_socket);\n\nvar _Timer = __webpack_require__(9);\n\nvar _Timer2 = _interopRequireDefault(_Timer);\n\nvar _modules = __webpack_require__(12);\n\n__webpack_require__(34);\n\nvar _redisConnect = __webpack_require__(10);\n\nvar _redisConnect2 = _interopRequireDefault(_redisConnect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* Configurations */\n/* Base imports */\nvar RedisStore = __webpack_require__(37)(_expressSession2.default);\n\n/* Main server setup */\n\n/* Routes */\nvar port = process.env.API_SERVER_PORT;\nif (!port) {\n  port = 3009;\n}\n\nvar app = (0, _express2.default)();\nvar server = (0, _http.Server)(app);\nvar io = new _socket2.default(server);\n\n/* Timer setup */\nvar triggerTime = function triggerTime(lastTimeStamp) {\n  _modules.PostController.getPostsSinceDate(lastTimeStamp).then(function allPosts(newMessages) {\n    if (newMessages) {\n      io.emit('messages', newMessages);\n    }\n  });\n};\n\nvar tickTime = function tickTime(now, later) {\n  io.emit('tick', now, later);\n};\n\nvar ttimer = new _Timer2.default(5, triggerTime, tickTime); // eslint-disable-line no-unused-vars\n\n/* Middleware setup */\napp.use((0, _serveFavicon2.default)('build/public/assets/favicon.ico'));\napp.use(function (err, req, res, next) {\n  if (res.headersSent) next(err);\n  res.status(err.status || port).render('500');\n});\napp.use(_express2.default.static('build/public'));\napp.use(_bodyParser2.default.json());\napp.use(_bodyParser2.default.urlencoded({ extended: true }));\nvar sessionMiddleware = (0, _expressSession2.default)({\n  name: 'ccs',\n  secret: 'MmyWTLNNsTi15L8n3iUH8kls',\n  resave: true,\n  saveUninitialized: false,\n  store: new RedisStore({ client: _redisConnect2.default })\n});\napp.use(sessionMiddleware);\napp.use(_passport2.default.initialize());\napp.use(_passport2.default.session());\napp.use((0, _morgan2.default)('combined'));\n\n/* socket setup */\nio.use(function ioSessionSetup(socket, next) {\n  // Wrap the express middleware\n  sessionMiddleware(socket.request, {}, next);\n});\n\n/* API Routes */\napp.use('/api/v1', [_modules.accountRoutes, _modules.authenticationRoutes, _modules.postRoutes]);\n\n// On socket connection, figure out who's still listening and send the list around.\nvar findAndEmitListeners = function findAndEmitListeners() {\n  // TODO: this is likely inefficient at large loads\n  var listeners = [];\n  var guestCounter = 0;\n  var clients = Object.keys(io.eio.clients);\n\n  clients.forEach(function findNames(client) {\n    var clientSession = io.eio.clients[client].request.session;\n    if (clientSession && clientSession.passport && clientSession.passport.user) {\n      listeners.push(clientSession.passport.user.displayName);\n    } else {\n      guestCounter += 1;\n    }\n  });\n  if (guestCounter > 0) {\n    listeners.push(guestCounter + ' guests');\n  }\n  io.emit('listeners', listeners);\n};\n\n/* Socket options */\nio.on('connection', function onConnect(socket) {\n  // onConnect(socket)\n  console.log('CONNECTION');\n  findAndEmitListeners();\n  socket.on('nick', function sendNick(name) {\n    socket.nick = name; // eslint-disable-line no-param-reassign\n    findAndEmitListeners();\n  });\n});\n\n// TODO: need a disconnect listener\n\napp.get('/', function baseReturn(req, res) {\n  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n});\n\nprocess.on('SIGTERM', function () {\n  console.log('Closing server.');\n  app.close();\n});\n\napp.on('close', function () {\n  console.log('Closing redis.');\n  _redisConnect2.default.quit();\n});\n\n/* Start the API Server */\n\nserver.listen(port, function reportOnListen(error) {\n  if (error) {\n    console.log('API Server ERROR on startup: ' + error);\n  } else {\n    console.log('API Server listening on http://localhost:' + port + '.');\n  }\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/apiserver.js\n// module id = 0\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/apiserver.js?");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("module.exports = require(\"http\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 1\n// module chunks = 0\n//# sourceURL=webpack:///external_%22http%22?");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("module.exports = require(\"serve-favicon\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"serve-favicon\"\n// module id = 2\n// module chunks = 0\n//# sourceURL=webpack:///external_%22serve-favicon%22?");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("module.exports = require(\"body-parser\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 3\n// module chunks = 0\n//# sourceURL=webpack:///external_%22body-parser%22?");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("module.exports = require(\"express\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 4\n// module chunks = 0\n//# sourceURL=webpack:///external_%22express%22?");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("module.exports = require(\"express-session\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-session\"\n// module id = 5\n// module chunks = 0\n//# sourceURL=webpack:///external_%22express-session%22?");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("module.exports = require(\"morgan\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"morgan\"\n// module id = 6\n// module chunks = 0\n//# sourceURL=webpack:///external_%22morgan%22?");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("module.exports = require(\"passport\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"passport\"\n// module id = 7\n// module chunks = 0\n//# sourceURL=webpack:///external_%22passport%22?");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("module.exports = require(\"socket.io\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"socket.io\"\n// module id = 8\n// module chunks = 0\n//# sourceURL=webpack:///external_%22socket.io%22?");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _redisConnect = __webpack_require__(10);\n\nvar _redisConnect2 = _interopRequireDefault(_redisConnect);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* This manages the global timer that releases new messages.\n * Really, this should be set on the database? At least have separate timers per 'room'.\n * But since we don't have rooms, we don't need that.\n */\nvar instance = null;\n\nvar TrancheTimer = function () {\n  function TrancheTimer() {\n    var timeSpread = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    var triggeredCallback = arguments[1];\n    var updateTimeCallback = arguments[2];\n\n    _classCallCheck(this, TrancheTimer);\n\n    // If we are a singleton and already registered, return that.\n    if (instance) {\n      return instance;\n    }\n    // Set up callbacks and settings\n    this.ringCallback = triggeredCallback;\n    this.tickTockCallback = updateTimeCallback;\n    this.timeSpreadMinutes = timeSpread;\n    this.updateTick = 5000; // milliseconds\n\n    // Set up last time\n    this.lastTimestamp = _redisConnect2.default.get('lastTranche');\n    if (!this.lastTime) {\n      this.setLastTimeToNow();\n    }\n    this.runner = setInterval(this.tickTock.bind(this), this.updateTick);\n    instance = this;\n  }\n\n  _createClass(TrancheTimer, [{\n    key: 'setLastTimeToNow',\n    value: function setLastTimeToNow() {\n      this.lastTimestamp = Date.now();\n      _redisConnect2.default.set('lastTranche', this.lastTimestamp);\n    }\n  }, {\n    key: 'tickTock',\n    value: function tickTock() {\n      var boost = this.timeSpreadMinutes * 60000;\n      var triggerTimestamp = this.lastTimestamp + boost;\n      var nowTimestamp = Date.now();\n      if (triggerTimestamp < nowTimestamp) {\n        var lastTimeStamp = this.lastTimestamp;\n        this.setLastTimeToNow();\n        this.ringCallback(lastTimeStamp);\n      }\n      this.tickTockCallback(nowTimestamp, triggerTimestamp);\n    }\n  }]);\n\n  return TrancheTimer;\n}();\n\nexports.default = TrancheTimer;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Timer/index.js\n// module id = 9\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Timer/index.js?");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _redis = __webpack_require__(11);\n\nvar _redis2 = _interopRequireDefault(_redis);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar REDIS_URL = process.env.REDIS_URL;\n\n/* Connect to redis */\nvar redisClient = _redis2.default.createClient(REDIS_URL);\n\nredisClient.on('error', function redisErrorReport(err) {\n  console.log('Redis connection error ' + err);\n});\n\nexports.default = redisClient;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/redisConnect.js\n// module id = 10\n// module chunks = 0\n//# sourceURL=webpack:///./src/config/redisConnect.js?");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("module.exports = require(\"redis\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"redis\"\n// module id = 11\n// module chunks = 0\n//# sourceURL=webpack:///external_%22redis%22?");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Account = __webpack_require__(13);\n\nObject.keys(_Account).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Account[key];\n    }\n  });\n});\n\nvar _Authentication = __webpack_require__(26);\n\nObject.keys(_Authentication).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Authentication[key];\n    }\n  });\n});\n\nvar _Post = __webpack_require__(31);\n\nObject.keys(_Post).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Post[key];\n    }\n  });\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/index.js\n// module id = 12\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/index.js?");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountController = exports.accountRoutes = undefined;\n\nvar _routes = __webpack_require__(14);\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _controller = __webpack_require__(15);\n\nvar AccountController = _interopRequireWildcard(_controller);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.accountRoutes = _routes2.default;\nexports.AccountController = AccountController;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Account/index.js\n// module id = 13\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Account/index.js?");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _express = __webpack_require__(4);\n\nvar _controller = __webpack_require__(15);\n\nvar _Authentication = __webpack_require__(26);\n\nvar routes = new _express.Router();\n\nroutes.route('/accounts').post(_controller.addAccountEndpoint);\n\nroutes.get('/accounts', (0, _Authentication.ensureLoggedIn)(), _controller.getAccountInfoEndpoint);\n\nexports.default = routes;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Account/routes.js\n// module id = 14\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Account/routes.js?");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar models = __webpack_require__(16);\n\nvar Account = models.Account;\n\n/* Returns either the current account's accountId or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current account can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user account attached\n *  @returns {string} accountId - the accountId to use in searches.\n *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n */\nvar activeAccountId = function getAccount(req) {\n  var currentAccount = req.user;\n  var onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentAccount && currentAccount.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.id) {\n    return req.user.id;\n  }\n  return null;\n};\n\n/* Adds an account to the Accounts database based on the fields passed in.\n * Params needed in body:\n *   @param {string} email - the email address\n *   @param {string} password - the user's password. Must pass owasp tests.\n *   @param {string} displayName - the name to display on the users page.\n */\nvar addAccountEndpoint = function addAccountEndpoint(req, res) {\n  var _req$body = req.body,\n      email = _req$body.email,\n      password = _req$body.password,\n      displayName = _req$body.displayName;\n  // const newAccount = new Account({ email, password, displayName });\n\n  var newAccount = Account.build({\n    email: email,\n    displayName: displayName\n  });\n  newAccount.setPassword(password).then(function () {\n    // eslint-disable-line arrow-body-style\n    return newAccount.save();\n  }).then(function (createdAccount) {\n    req.login(createdAccount, function loginFailed(error) {\n      console.log('Failed login after creation: ' + error);\n    });\n    var cleanedAccount = createdAccount.toJSON();\n    res.status(201).json({\n      success: true,\n      message: 'Successfully Registered',\n      account: cleanedAccount\n    });\n  }).catch(function (err) {\n    // TODO: this only works on mongoose. Have to dig into the err object to see where to pick up.\n    if (err.code === 11000) {\n      res.statusMessage = 'Account with that email already exists'; // eslint-disable-line no-param-reassign\n      res.status(409).end();\n      return;\n    }\n    var errorMessage = 'Account could not be created.';\n    if (err.message) {\n      errorMessage = err.message.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n    }\n    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n    // TODO: Return errors better. The err object has an errors array that could be parsed.\n    res.status(422).send(JSON.stringify({ errors: err.message }));\n  });\n};\n\n/* Get account info for accountId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the search parameters.\n */\nvar getAccountInfoEndpoint = function getAccountInfoEndpoint(req, res) {\n  // eslint-disable-line consistent-return\n  var accountId = activeAccountId(req);\n  if (!accountId) {\n    return res.status(422).json({ success: false, message: 'No accountId provided' });\n  }\n  Account.findById(accountId).then(function (item) {\n    var cleanedItem = item.toJSON();\n    res.status(201).json({\n      success: true,\n      account: cleanedItem\n    });\n  }).catch(function (err) {\n    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n};\n\nvar updateAccountEndpoint = function updateAccountEndpoint(req, res) {\n  res.status(418).json({\n    message: 'Brewing'\n  });\n};\n\nexports.addAccountEndpoint = addAccountEndpoint;\nexports.updateAccountEndpoint = updateAccountEndpoint;\nexports.getAccountInfoEndpoint = getAccountInfoEndpoint;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Account/controller.js\n// module id = 15\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Account/controller.js?");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _sequelize = __webpack_require__(17);\n\nvar _sequelize2 = _interopRequireDefault(_sequelize);\n\nvar _Account = __webpack_require__(18);\n\nvar _Account2 = _interopRequireDefault(_Account);\n\nvar _Post = __webpack_require__(25);\n\nvar _Post2 = _interopRequireDefault(_Post);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar allConfigs = {\n  development: {\n    username: 'mdw',\n    password: null,\n    database: 'calmcomment',\n    host: '127.0.0.1',\n    dialect: 'postgres'\n  },\n  test: {\n    username: 'root',\n    password: null,\n    database: 'database_test',\n    host: '127.0.0.1',\n    dialect: 'postgres'\n  },\n  production: {\n    username: 'root',\n    password: null,\n    database: 'database_production',\n    host: '127.0.0.1',\n    dialect: 'postgres'\n  }\n};\n\n/* Set up the general process */\nvar env = process.env.NODE_ENV || 'development';\nvar config = allConfigs[env];\nvar sequelize = null;\nif (process.env.DATABASE_URL) {\n  sequelize = new _sequelize2.default(process.env.DATABASE_URL);\n} else {\n  sequelize = new _sequelize2.default(config.database, config.username, config.password, config);\n}\nvar db = {};\n\n/* Connect and log in to postgres */\nsequelize.authenticate().then(function () {\n  console.log('Success: Connection to Postgres established .');\n}, function trapError(err) {\n  console.log('FAILURE: Unable to connect to the Postgres database:', err);\n});\n\n/* Create the models\n * TODO: This is a manual update nightmare.\n */\nvar accountModel = (0, _Account2.default)(sequelize, _sequelize2.default);\ndb[accountModel.name] = accountModel;\nvar postModel = (0, _Post2.default)(sequelize, _sequelize2.default);\ndb[postModel.name] = postModel;\n\n/* Do associations */\nObject.keys(db).forEach(function associateThem(modelName) {\n  if ('associate' in db[modelName]) {\n    db[modelName].associate(db);\n  }\n});\n\n/* Push the models to the database */\nsequelize.sync() //   .sync({ force: true }) <= removed as this drops the table\n.then(function () {\n  console.log('Success: Synced models to database.');\n}, function trapSyncError(err) {\n  console.log('FAILURE: An error occurred while creating the table:', err);\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = _sequelize2.default;\n\nmodule.exports = db;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/models/index.js\n// module id = 16\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/models/index.js?");

/***/ },
/* 17 */
/***/ function(module, exports) {

	eval("module.exports = require(\"sequelize\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sequelize\"\n// module id = 17\n// module chunks = 0\n//# sourceURL=webpack:///external_%22sequelize%22?");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _passwordEncryption = __webpack_require__(19);\n\nvar _appraise = __webpack_require__(22);\n\nmodule.exports = function (sequelize, DataTypes) {\n  var Account = sequelize.define('Account', {\n    displayName: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isValidDisplayName: function validateDisplayName(value) {\n          var appraisalMessages = (0, _appraise.appraiseDisplayName)(value);\n          if (appraisalMessages.length > 0) {\n            throw new Error(appraisalMessages.join(' '));\n          }\n        }\n      }\n    },\n    email: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        isValidEmail: function validateEmail(value) {\n          var appraisalMessages = (0, _appraise.appraiseEmail)(value);\n          if (appraisalMessages.length > 0) {\n            throw new Error(appraisalMessages.join(' '));\n          }\n        }\n      },\n      unique: true\n    },\n    encryptedPasswordHash: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: true\n      }\n    },\n    encryptedPasswordPepperId: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      validate: {\n        notEmpty: true\n      }\n    }\n  }, {\n    instanceMethods: {\n      setPassword: function setPassword(password) {\n        var self = this;\n        return Promise.resolve((0, _appraise.appraisePassword)(password)).then(function checkAppraisal(appraisalMessages) {\n          if (appraisalMessages.length > 0) {\n            throw new Error(appraisalMessages.join(', '));\n          }\n          return password;\n        }).then(function runHashing(passwordValue) {\n          return (0, _passwordEncryption.encryptPassword)(passwordValue);\n        }).then(function (encryptedValue) {\n          self.encryptedPasswordHash = encryptedValue.encrypted;\n          self.encryptedPasswordPepperId = encryptedValue.pepperId;\n        }).catch(function (err) {\n          throw err;\n        });\n      },\n      toJSON: function stripValues() {\n        var values = Object.assign({}, this.get());\n        delete values.encryptedPasswordHash;\n        delete values.encryptedPasswordPepperId;\n        delete values.deletedAt;\n        return values;\n      },\n      // TODO: We really need a profile table but this works for now.\n      toProfile: function stripForProfile() {\n        var values = Object.assign({}, this.get());\n        delete values.encryptedPasswordHash;\n        delete values.encryptedPasswordPepperId;\n        delete values.email;\n        delete values.deletedAt;\n        return values;\n      },\n      comparePassword: function comparePassword(candidate) {\n        return (0, _passwordEncryption.passwordsMatch)(candidate, this.encryptedPasswordHash, this.encryptedPasswordPepperId);\n      }\n    },\n    classMethods: {\n      associate: function associatModesl(models) {\n        Account.hasMany(models.Post);\n      }\n    }\n  });\n  return Account;\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/models/Account.js\n// module id = 18\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/models/Account.js?");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.passwordsMatch = exports.aesHash = exports.bcryptHash = exports.hashPassword = exports.deAesHash = exports.encryptPassword = undefined;\n\nvar _bcrypt = __webpack_require__(20);\n\nvar _crypto = __webpack_require__(21);\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* Hashes the password into a SHA512 hex hash */\nvar hashPassword = function hashPassword(password) {\n  var hasher = _crypto2.default.createHash('sha512');\n  hasher.update(password);\n  var hashed = hasher.digest('hex');\n  return hashed;\n};\n\n/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n * Salt is returned as part of the hash and thus saved.\n * Note that this version of bcrypt only takes the first 72 characters.\n  */\nvar bcryptHash = function bcryptHash(passwordhash) {\n  var saltRounds = 10;\n  return (0, _bcrypt.hash)(passwordhash, saltRounds);\n};\n\n/* Encrypts the bcrypted string using aes256 using a pepper stored\n *   in the environment. This is what should be finally saved.\n */\nvar aesHash = function aesHash(passwordhash) {\n  var currentPepperId = process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER;\n  var pepper = process.env[currentPepperId];\n  var algorithm = 'aes-256-ctr';\n  var cipher = _crypto2.default.createCipher(algorithm, pepper);\n  var crypted = cipher.update(passwordhash, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return { encrypted: crypted, pepperId: currentPepperId };\n};\n\n/* Encrypting a password.\n   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n*/\nvar encryptPassword = function encryptPassword(rawPassword) {\n  return Promise.resolve(rawPassword).then(hashPassword).then(bcryptHash).then(aesHash);\n};\n\n/* Decrypts the encrypted bcrypt hash using aes256 using a pepper stored\n *   in the environment. Should use this only with the bcrypted, hashed password.\n */\nvar deAesHash = function deAesHash(passwordhash, pepperId) {\n  var pepper = process.env[pepperId];\n  if (!pepper) {\n    return new Error('Pepper not found.');\n  }\n  var algorithm = 'aes-256-ctr';\n  var decipher = _crypto2.default.createDecipher(algorithm, pepper);\n  var decrypted = decipher.update(passwordhash, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n};\n\n/* Compare passwords.\n * Because we are using hashing and encrypting, we have to do that before we compare.\n */\nvar passwordsMatch = function passwordsMatch(candidatePassword, encryptedPasswordHash, pepperId) {\n  // compare the submitted password to encrypted password in database.\n  var candidateHashed = hashPassword(candidatePassword);\n  var decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n  return (0, _bcrypt.compare)(candidateHashed, decryptedPass);\n};\n\nexports.encryptPassword = encryptPassword;\nexports.deAesHash = deAesHash;\nexports.hashPassword = hashPassword;\nexports.bcryptHash = bcryptHash;\nexports.aesHash = aesHash;\nexports.passwordsMatch = passwordsMatch;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/models/passwordEncryption.js\n// module id = 19\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/models/passwordEncryption.js?");

/***/ },
/* 20 */
/***/ function(module, exports) {

	eval("module.exports = require(\"bcrypt\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bcrypt\"\n// module id = 20\n// module chunks = 0\n//# sourceURL=webpack:///external_%22bcrypt%22?");

/***/ },
/* 21 */
/***/ function(module, exports) {

	eval("module.exports = require(\"crypto\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 21\n// module chunks = 0\n//# sourceURL=webpack:///external_%22crypto%22?");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appraisePostMessage = exports.appraisePostSubject = exports.appraiseAccountId = exports.appraisePasswordErrors = exports.appraisePasswordExtra = exports.appraisePassword = exports.appraiseDisplayName = exports.appraiseEmail = exports.appraiseThese = undefined;\n\nvar _validator = __webpack_require__(23);\n\nvar _owaspPasswordStrengthTest = __webpack_require__(24);\n\nvar _owaspPasswordStrengthTest2 = _interopRequireDefault(_owaspPasswordStrengthTest);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* Is the email valid? Uses the validator library to test.\n */\nvar appraiseEmail = function appraiseEmail(emailAddress) {\n  var messages = [];\n  if ((0, _validator.isEmpty)(emailAddress)) {\n    messages.push('Email address is required.');\n  }\n  if (!(0, _validator.isEmpty)(emailAddress) && !(0, _validator.isEmail)(emailAddress)) {\n    messages.push('Email address does not appear to be valid.');\n  }\n  return messages;\n};\n\n/* Test for the validity of the displayName.\n *  Currently only checks if it's empty.\n */\nvar appraiseDisplayName = function appraiseDisplayName(displayName) {\n  var messages = [];\n  if ((0, _validator.isEmpty)(displayName)) {\n    messages.push('Display name is required.');\n  }\n  return messages;\n};\n\n/* Tests a password.\n * Must be valid and pass the owasp validation tests.\n */\nvar appraisePassword = function appraisePassword(password) {\n  var messages = [];\n  if ((0, _validator.isEmpty)(password)) {\n    messages.push('Password is required.');\n  } else {\n    var owaspResults = _owaspPasswordStrengthTest2.default.test(password);\n    if (!owaspResults.strong) {\n      messages = messages.concat(owaspResults.errors);\n    }\n  }\n  return messages;\n};\n\nvar appraisePasswordErrors = {\n  minLength: 0,\n  maxLength: 1,\n  repeating: 2,\n  needLowercase: 3,\n  needUppercase: 4,\n  needNumber: 5,\n  needCharacter: 6\n};\n\n/* A wrapper for awasp tests that returns this\n * {\n *   errors              : [],\n *   failedTests         : [],\n *   requiredTestErrors  : [],\n *   optionalTestErrors  : [],\n *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n *   isPassphrase        : false,\n *   strong              : true,\n *   optionalTestsPassed : 4\n * }\n */\nvar appraisePasswordExtra = function appraisePasswordExtra(password) {\n  return _owaspPasswordStrengthTest2.default.test(password);\n};\n\n/* Tests for the presense of an accountID.\n *  Only checks if it's empty.\n *  TODO: Check if the account actually exists.\n */\nvar appraiseAccountId = function appraiseAccountId(accountId) {\n  var messages = [];\n  if ((0, _validator.isEmpty)(accountId)) {\n    messages.push('AccountId is required.');\n  }\n  return messages;\n};\n\n/* Validates multiple options. Pass in an object with one of the following:\n * email: {string} validates an email (or empty}\n * displayName; {string} checks for empty\n * password: {string} validates a password\n * accountId: {string} validates the accountId\n * @returns: an object (see validator object below)\n */\nvar appraiseThese = function appraiseThese(what) {\n  var appraised = {\n    success: true, // Did all tests pass\n    tested: [], // Which tests where done? Check this to make sure things were passed in correctly.\n    errors: {} };\n  if ('email' in what) {\n    appraised.tested.push('email');\n    var messages = appraiseEmail(what.email);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.email = messages;\n    }\n  }\n  if ('password' in what) {\n    appraised.tested.push('password');\n    var _messages = appraisePassword(what.password);\n    if (_messages && _messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.password = _messages;\n    }\n  }\n  if ('displayName' in what) {\n    appraised.tested.push('displayName');\n    var _messages2 = appraiseDisplayName(what.displayName);\n    if (_messages2 && _messages2.length > 0) {\n      appraised.success = false;\n      appraised.errors.displayName = _messages2;\n    }\n  }\n  if ('accountId' in what) {\n    appraised.tested.push('accountId');\n    var _messages3 = appraiseAccountId(what.accountId);\n    if (_messages3 && _messages3.length > 0) {\n      appraised.success = false;\n      appraised.errors.accountId = _messages3;\n    }\n  }\n  return appraised;\n};\n\n/* Tests for the presense of a post message.\n *  Only checks if it's empty.\n *  Here for future functionality.\n */\nvar appraisePostMessage = function appraisePostMessage(postMessage) {\n  var messages = [];\n  if (!postMessage || (0, _validator.isEmpty)(postMessage)) {\n    messages.push('A message is required.');\n  }\n  return messages;\n};\n\n/* Tests for the presense of a post subject.\n *  Runs no checks.\n *  Here for future functionality.\n */\n/* eslint-disable no-unused-vars */\nvar appraisePostSubject = function appraisePostSubject(postSubject) {\n  return [];\n};\n/* eslint-enable no-unused-vars */\n\nexports.appraiseThese = appraiseThese;\nexports.appraiseEmail = appraiseEmail;\nexports.appraiseDisplayName = appraiseDisplayName;\nexports.appraisePassword = appraisePassword;\nexports.appraisePasswordExtra = appraisePasswordExtra;\nexports.appraisePasswordErrors = appraisePasswordErrors;\nexports.appraiseAccountId = appraiseAccountId;\nexports.appraisePostSubject = appraisePostSubject;\nexports.appraisePostMessage = appraisePostMessage;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shared/helpers/appraise.js\n// module id = 22\n// module chunks = 0\n//# sourceURL=webpack:///./src/shared/helpers/appraise.js?");

/***/ },
/* 23 */
/***/ function(module, exports) {

	eval("module.exports = require(\"validator\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator\"\n// module id = 23\n// module chunks = 0\n//# sourceURL=webpack:///external_%22validator%22?");

/***/ },
/* 24 */
/***/ function(module, exports) {

	eval("module.exports = require(\"owasp-password-strength-test\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"owasp-password-strength-test\"\n// module id = 24\n// module chunks = 0\n//# sourceURL=webpack:///external_%22owasp-password-strength-test%22?");

/***/ },
/* 25 */
/***/ function(module, exports) {

	eval("'use strict';\n\n/* A post is the atomic messages of the user */\nmodule.exports = function (sequelize, DataTypes) {\n  var Post = sequelize.define('Post', {\n    message: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    edited: {\n      type: DataTypes.BOOLEAN\n    }\n  }, {\n    timestamps: true,\n    paranoid: true,\n    classMethods: {\n      associate: function associateModels(models) {\n        Post.belongsTo(models.Account);\n      }\n    }\n  });\n  return Post;\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/models/Post.js\n// module id = 25\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/models/Post.js?");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.authenticationRoutes = exports.ensureLoggedIn = undefined;\n\n__webpack_require__(27);\n\nvar _ensureLoggedIn = __webpack_require__(29);\n\nvar _ensureLoggedIn2 = _interopRequireDefault(_ensureLoggedIn);\n\nvar _routes = __webpack_require__(30);\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.ensureLoggedIn = _ensureLoggedIn2.default;\nexports.authenticationRoutes = _routes2.default;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Authentication/index.js\n// module id = 26\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Authentication/index.js?");

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _passportLocal = __webpack_require__(28);\n\nvar _passport = __webpack_require__(7);\n\nvar _passport2 = _interopRequireDefault(_passport);\n\nvar _models = __webpack_require__(16);\n\nvar _models2 = _interopRequireDefault(_models);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Account = _models2.default.Account;\n\n/* Configure the local strategy for use by Passport.\n *\n * The local strategy require a `verify` function which receives the credentials\n * (`username` and `password`) submitted by the user.  The function must verify\n * that the password is correct and then invoke `callback` with a user object, which\n * will be set at `req.user` in route handlers after authentication.\n */\n_passport2.default.use(new _passportLocal.Strategy({\n  usernameField: 'email',\n  passwordField: 'password'\n}, function snsLocalStrategy(email, password, callback) {\n  var foundAccount = null;\n  Account.find({ where: { email: email } }).then(function comparePass(theAccount) {\n    foundAccount = theAccount;\n    return theAccount.comparePassword(password);\n  }).then(function returnAccount(passwordsMatched) {\n    if (!passwordsMatched) {\n      throw new Error('Could not verify account');\n    }\n    return foundAccount;\n  }).then(function returnAccount(accountToReturn) {\n    callback(null, accountToReturn);\n  }).catch(function catchAuthFailure(err) {\n    console.log('Passport authentication failed: Unknown error: ' + err);\n    return callback(null, false, { message: 'Could not authenticate account' });\n  });\n}));\n\n/* Configure Passport authenticated session persistence.\n *\n * In order to restore authentication state across HTTP requests, Passport needs\n * to serialize users into and deserialize users out of the session.  The\n * typical implementation of this is as simple as supplying the user ID when\n * serializing, and querying the user record by ID from the database when\n * deserializing.\n */\n_passport2.default.serializeUser(function serializeAccount(account, callback) {\n  callback(null, account.id);\n});\n\n_passport2.default.deserializeUser(function deserializeAccount(accountId, callback) {\n  Account.findById(accountId).then(function determineAction(theAccount) {\n    return callback(null, theAccount);\n  }).catch(function noFind(err) {\n    return callback(err);\n  });\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Authentication/passportConfigure.js\n// module id = 27\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Authentication/passportConfigure.js?");

/***/ },
/* 28 */
/***/ function(module, exports) {

	eval("module.exports = require(\"passport-local\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"passport-local\"\n// module id = 28\n// module chunks = 0\n//# sourceURL=webpack:///external_%22passport-local%22?");

/***/ },
/* 29 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ensureLoggedIn;\n/* Based on here: https://github.com/jaredhanson/connect-ensure-login/blob/master/lib/ensureLoggedIn.js\n * Used under MIT license\n * I edited it to make it go along with my linter and easier for me to understand.\n * Original release notes:\n * Ensure that a user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that a user is logged in.  If a request is received\n * that is unauthenticated, the request will be redirected to a login page (by\n * default to `/login`).\n *\n * Additionally, `returnTo` will be be set in the session to the URL of the\n * current request.  After authentication, this value can be used to redirect\n * the user to the page that was originally requested.\n *\n * Options:\n *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\n *   - `setReturnTo`  set redirectTo in session, defaults to _true_\n *\n * Examples:\n *\n *     app.get('/profile',\n *       ensureLoggedIn(),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn('/signin'),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nfunction ensureLoggedIn(options) {\n  var unauthenticatedRedirectURL = '/login';\n  if (typeof options === 'string') {\n    unauthenticatedRedirectURL = options;\n  } else if (options && options.redirectTo && options.redirectTo.length > 0) {\n    unauthenticatedRedirectURL = options.redirectTo;\n  }\n  var allOptions = options || {};\n\n  var setReturnTo = allOptions.setReturnTo === undefined ? true : options.setReturnTo;\n\n  return function areWeAuthenticated(req, res, next) {\n    // eslint-disable-line consistent-return\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      if (setReturnTo && req.session) {\n        req.session.returnTo = req.originalUrl || req.url; // eslint-disable-line no-param-reassign\n      }\n      return res.redirect(unauthenticatedRedirectURL);\n    }\n    next();\n  };\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Authentication/ensureLoggedIn.js\n// module id = 29\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Authentication/ensureLoggedIn.js?");

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _express = __webpack_require__(4);\n\nvar _passport = __webpack_require__(7);\n\nvar _passport2 = _interopRequireDefault(_passport);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar routes = new _express.Router();\n\nfunction signinUser(req, res, next) {\n  _passport2.default.authenticate('local', function (err, user) {\n    // eslint-disable-line consistent-return\n    if (err || !user) {\n      res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n      return;\n    }\n    req.logIn(user, function (error) {\n      // eslint-disable-line consistent-return\n      if (error) {\n        return next(error);\n      }\n      res.cookie('ccsl', 'y', { httpOnly: false });\n\n      // you can send a json response instead of redirecting the user\n      res.status(201).json({\n        success: true,\n        message: 'Logged in',\n        account: user\n      });\n    });\n  })(req, res, next);\n}\n\nroutes.route('/sessions').post(signinUser);\n\nroutes.route('/sessions').delete(function logThemOut(req, res) {\n  req.session.destroy();\n  req.logout();\n  res.clearCookie('ccsl');\n  res.status(204).end();\n});\n\n/* Checks if a user is currently authenticated.\n * Technically, checks the cookie.\n */\nroutes.route('/sessions').get(function isAuthenticated(req, res) {\n  if (!req.isAuthenticated || !req.isAuthenticated()) {\n    res.status(204).end();\n  }\n  res.status(403).end();\n});\n\nexports.default = routes;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Authentication/routes.js\n// module id = 30\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Authentication/routes.js?");

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PostController = exports.postRoutes = undefined;\n\nvar _routes = __webpack_require__(32);\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _controller = __webpack_require__(33);\n\nvar PostController = _interopRequireWildcard(_controller);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.postRoutes = _routes2.default;\nexports.PostController = PostController;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Post/index.js\n// module id = 31\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Post/index.js?");

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _express = __webpack_require__(4);\n\nvar _controller = __webpack_require__(33);\n\nvar _Authentication = __webpack_require__(26);\n\nvar routes = new _express.Router();\n// Get a specific post\nroutes.get('/posts/:postId', _controller.getSinglePostEndpoint);\n// Get all posts\nroutes.get('/posts', _controller.getPostsEndpoint);\n// Add a post\nroutes.post('/posts', (0, _Authentication.ensureLoggedIn)(), _controller.addPostEndpoint);\n// Update a post with the id in the url\nroutes.put('/posts/:postId', (0, _Authentication.ensureLoggedIn)(), _controller.updatePostEndpoint);\n// Update a post with the postId in the body\nroutes.put('/posts/', (0, _Authentication.ensureLoggedIn)(), _controller.updatePostEndpoint);\n// Delete a post\nroutes.delete('/posts/:postId', (0, _Authentication.ensureLoggedIn)(), _controller.removePostEndpoint);\n\nexports.default = routes;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Post/routes.js\n// module id = 32\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Post/routes.js?");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removePostEndpoint = exports.updatePostEndpoint = exports.addPostEndpoint = exports.getPostsSinceDate = exports.getSinglePostEndpoint = exports.getPostsEndpoint = undefined;\n\nvar _Timer = __webpack_require__(9);\n\nvar _Timer2 = _interopRequireDefault(_Timer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar models = __webpack_require__(16);\n\nvar Post = models.Post;\nvar Account = models.Account;\n\n/* Builds the where clause for the posts search.\n * If there is a user account, looks for all of their posts.\n * If not, just filters by date\n * TODO: Add some filtering by date/number for pagination\n */\nvar buildGetPostWhere = function buildGetPostWhere(userAccountId) {\n  var ttimer = new _Timer2.default();\n\n  var lastTime = ttimer.lastTimestamp;\n  if (userAccountId) {\n    return {\n      $or: [{ AccountId: userAccountId }, {\n        createdAt: {\n          $lt: new Date(lastTime)\n        }\n      }]\n    };\n  }\n  return {\n    createdAt: {\n      $lt: new Date(lastTime)\n    }\n  };\n};\n\n/* Get all posts. Filters by the release date.\n */\nvar getPostsEndpoint = function getPostsEndpoint(req, res) {\n  // eslint-disable-line consistent-return\n  var accountId = null;\n  if (req.user) {\n    accountId = req.user.id;\n  }\n  var whereClause = buildGetPostWhere(accountId);\n  console.log('Where clause');\n  console.dir(whereClause);\n  Post.findAll({\n    where: whereClause,\n    include: [{\n      model: Account,\n      attributes: ['displayName']\n    }],\n    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId'],\n    limit: 30,\n    order: [['createdAt', 'DESC']]\n  }).then(function (items) {\n    if (!items) {\n      throw new Error('Post not found');\n    }\n    res.status(200).json({\n      success: true,\n      posts: items\n    });\n  }).catch(function (err) {\n    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n    res.status(404).end();\n  });\n};\n\n/* Get a post by id.\n *  @param {number} postId in params\n *  TODO Does not filter by date or id. This is a hole that someone could exploit to get\n *    non-released posts.\n */\nvar getSinglePostEndpoint = function getSinglePostEndpoint(req, res) {\n  // eslint-disable-line consistent-return\n  var itemId = req.params.postId;\n  if (!itemId) {\n    res.status(422).json({ success: false, messages: 'No PostId provided.' });\n  }\n  Post.find({\n    where: { id: itemId },\n    include: [{\n      model: Account,\n      attributes: ['displayName']\n    }],\n    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId']\n  }).then(function (item) {\n    if (!item) {\n      throw new Error('Post not found');\n    }\n    res.status(200).json({\n      success: true,\n      posts: item.toJSON()\n    });\n  }).catch(function (err) {\n    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n    res.status(404).end();\n  });\n};\n\n/* Get all posts since the datestamp provided. Also gets any posts updated in the time slot.\n */\nvar getPostsSinceDate = function getPostsSinceDate(sinceDateStamp) {\n  // eslint-disable-line consistent-return\n  var ttimer = new _Timer2.default();\n  var lastTime = ttimer.lastTimestamp;\n  return Post.findAll({\n    where: {\n      createdAt: {\n        $lt: new Date(lastTime),\n        $gt: new Date(sinceDateStamp)\n      },\n      updatedAt: {\n        $lt: new Date(lastTime),\n        $gt: new Date(sinceDateStamp)\n      }\n    },\n    include: [{\n      model: Account,\n      attributes: ['displayName']\n    }],\n    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId'],\n    limit: 30,\n    order: [['createdAt', 'DESC']]\n  }).then(function (items) {\n    if (!items) {\n      throw new Error('Post not found');\n    }\n    return items;\n  }).catch(function (err) {\n    // eslint-disable-line arrow-body-style\n    return err;\n  });\n};\n\n/* Adds a post to the Post database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} message - the main message body\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for\n */\nvar addPostEndpoint = function addPostEndpoint(req, res) {\n  var accountId = req.user.id;\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  var newPost = Post.build({\n    message: req.body.message,\n    AccountId: accountId\n  });\n  newPost.save().then(function (createdItem) {\n    if (!createdItem) {\n      throw new Error('Post could not be created');\n    }\n    var cleanedPost = createdItem.toJSON();\n    res.status(201).json({\n      success: true,\n      message: 'Successfully created post',\n      post: cleanedPost\n    });\n  }).catch(function (err) {\n    var errorMessage = 'Post could not be created.';\n    if (err.message) {\n      errorMessage = err.message;\n    }\n    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n};\n\n/* Updates a post\n *  @param {string} message - the main message body\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n */\nvar updatePostEndpoint = function updatePostEndpoint(req, res) {\n  var accountId = req.user.id;\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  var itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.status(422).json({ success: false, messages: 'No PostId provided.' });\n  }\n  if (req.body.message.length === 0) {\n    res.status(422).json({ success: false, messages: 'Nothing to update.' });\n  }\n  Post.findOne({\n    where: {\n      id: itemId,\n      AccountId: accountId\n    }\n  }).then(function updateIt(post) {\n    if (!post) {\n      throw new Error('Post could not be found to update');\n    }\n    var thePost = post;\n    thePost.message = req.body.message;\n    thePost.edited = true;\n    return thePost.save();\n  }).then(function () {\n    res.status(205).json({\n      success: true,\n      message: 'Successfully updated post'\n    });\n  }).catch(function (err) {\n    var errorMessage = 'Post could not be updated.';\n    if (err.message) {\n      errorMessage = err.message;\n    }\n    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n};\n\n/* Removes a post (marks the status to 'removed')\n * Params needed in req.body:\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n */\nvar removePostEndpoint = function removePostEndpoint(req, res) {\n  var accountId = req.user.id;\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  var itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.findOne({\n    where: {\n      id: itemId,\n      AccountId: accountId\n    }\n  }).then(function destroyIt(post) {\n    return post.destroy();\n  }).then(function () {\n    res.status(204).end();\n  }).catch(function (err) {\n    var errorMessage = 'Post could not be removed.';\n    if (err.message) {\n      errorMessage = err.message;\n    }\n    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n};\n\nexports.getPostsEndpoint = getPostsEndpoint;\nexports.getSinglePostEndpoint = getSinglePostEndpoint;\nexports.getPostsSinceDate = getPostsSinceDate;\nexports.addPostEndpoint = addPostEndpoint;\nexports.updatePostEndpoint = updatePostEndpoint;\nexports.removePostEndpoint = removePostEndpoint;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/apiserver/modules/Post/controller.js\n// module id = 33\n// module chunks = 0\n//# sourceURL=webpack:///./src/apiserver/modules/Post/controller.js?");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _dotenv = __webpack_require__(35);\n\nvar _dotenv2 = _interopRequireDefault(_dotenv);\n\nvar _requireEnvironmentVariables = __webpack_require__(36);\n\nvar _requireEnvironmentVariables2 = _interopRequireDefault(_requireEnvironmentVariables);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* 'As early as possible in your application, require and configure dotenv.'\n *   - https://www.npmjs.com/package/dotenv\n *\n * However, we aren't going to load these in production as it could lead to sloppy deploys.\n */\nif (process.env.NODE_ENV && process.env.NODE_ENV !== 'production') {\n  _dotenv2.default.load();\n} else {\n  _dotenv2.default.load();\n}\n\n/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n *   the process exits with code 400.\n * https://github.com/bjoshuanoah/require-environment-variables\n */\n(0, _requireEnvironmentVariables2.default)(['REDIS_URL', 'API_SERVER_PORT', 'MAIN_SERVER_PORT', 'ACCOUNT_PEPPER_1', 'ACCOUNT_ENCRYPT_CURRENT_PEPPER', 'IDIER_WORKER_ID']);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/environment.js\n// module id = 34\n// module chunks = 0\n//# sourceURL=webpack:///./src/config/environment.js?");

/***/ },
/* 35 */
/***/ function(module, exports) {

	eval("module.exports = require(\"dotenv\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 35\n// module chunks = 0\n//# sourceURL=webpack:///external_%22dotenv%22?");

/***/ },
/* 36 */
/***/ function(module, exports) {

	eval("module.exports = require(\"require-environment-variables\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"require-environment-variables\"\n// module id = 36\n// module chunks = 0\n//# sourceURL=webpack:///external_%22require-environment-variables%22?");

/***/ },
/* 37 */
/***/ function(module, exports) {

	eval("module.exports = require(\"connect-redis\");\n\n//////////////////\n// WEBPACK FOOTER\n// external \"connect-redis\"\n// module id = 37\n// module chunks = 0\n//# sourceURL=webpack:///external_%22connect-redis%22?");

/***/ }
/******/ ]);