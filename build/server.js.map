{"version":3,"sources":["webpack:///server.js","webpack:///webpack/bootstrap 6317c88498833f8f6ddc","webpack:///./src/server/server.js","webpack:///external \"http\"","webpack:///external \"serve-favicon\"","webpack:///external \"body-parser\"","webpack:///external \"express\"","webpack:///external \"express-session\"","webpack:///external \"morgan\"","webpack:///external \"passport\"","webpack:///external \"socket.io\"","webpack:///./src/server/modules/Timer/index.js","webpack:///./src/config/redisConnect.js","webpack:///external \"redis\"","webpack:///./src/server/modules/index.js","webpack:///./src/server/modules/Account/index.js","webpack:///./src/server/modules/Account/routes.js","webpack:///./src/server/modules/Account/controller.js","webpack:///./src/server/models/index.js","webpack:///external \"sequelize\"","webpack:///./src/server/models/Account.js","webpack:///./src/server/models/passwordEncryption.js","webpack:///external \"bcrypt\"","webpack:///external \"crypto\"","webpack:///./src/shared/helpers/appraise.js","webpack:///external \"validator\"","webpack:///external \"owasp-password-strength-test\"","webpack:///./src/server/models/Post.js","webpack:///./src/server/modules/Authentication/index.js","webpack:///./src/server/modules/Authentication/passportConfigure.js","webpack:///external \"passport-local\"","webpack:///./src/server/modules/Authentication/ensureLoggedIn.js","webpack:///./src/server/modules/Authentication/routes.js","webpack:///./src/server/modules/Post/index.js","webpack:///./src/server/modules/Post/routes.js","webpack:///./src/server/modules/Post/controller.js","webpack:///./src/config/environment.js","webpack:///external \"dotenv\"","webpack:///external \"require-environment-variables\"","webpack:///external \"connect-redis\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_http","_serveFavicon","_serveFavicon2","_bodyParser","_bodyParser2","_express","_express2","_expressSession","_expressSession2","_morgan","_morgan2","_passport","_passport2","_socket","_socket2","_Timer","_Timer2","_modules","_redisConnect","_redisConnect2","RedisStore","port","process","env","MAIN_SERVER_PORT","app","server","Server","io","triggerTime","lastTimeStamp","PostController","getPostsSinceDate","then","newMessages","emit","tickTime","now","later","use","err","req","res","next","headersSent","status","render","static","json","urlencoded","extended","sessionMiddleware","name","secret","resave","saveUninitialized","store","client","initialize","session","socket","request","accountRoutes","authenticationRoutes","postRoutes","findAndEmitListeners","listeners","guestCounter","clients","Object","keys","eio","forEach","clientSession","passport","user","push","displayName","on","console","log","nick","get","send","close","quit","listen","error","require","_classCallCheck","instance","Constructor","TypeError","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","TrancheTimer","timeSpread","arguments","undefined","triggeredCallback","updateTimeCallback","this","ringCallback","tickTockCallback","timeSpreadMinutes","updateTick","lastTimestamp","lastTime","setLastTimeToNow","runner","setInterval","tickTock","bind","Date","set","boost","triggerTimestamp","nowTimestamp","_redis","_redis2","REDIS_URL","redisClient","createClient","_Account","_Authentication","_Post","_interopRequireWildcard","newObj","hasOwnProperty","AccountController","_routes","_routes2","_controller","routes","Router","route","post","addAccountEndpoint","ensureLoggedIn","getAccountInfoEndpoint","models","Account","activeAccountId","currentAccount","onBehalfOfId","body","canActOnBehalfOf","_req$body","email","password","newAccount","build","setPassword","save","createdAccount","login","cleanedAccount","toJSON","success","message","account","catch","code","statusMessage","end","errorMessage","replace","JSON","stringify","errors","accountId","findById","item","cleanedItem","updateAccountEndpoint","_sequelize","_sequelize2","_Account2","_Post2","allConfigs","development","username","database","host","dialect","test","production","config","sequelize","DATABASE_URL","db","authenticate","accountModel","postModel","modelName","associate","sync","Sequelize","_passwordEncryption","_appraise","DataTypes","define","type","STRING","allowNull","validate","isValidDisplayName","appraisalMessages","appraiseDisplayName","Error","join","isValidEmail","appraiseEmail","unique","encryptedPasswordHash","notEmpty","encryptedPasswordPepperId","instanceMethods","self","Promise","resolve","appraisePassword","passwordValue","encryptPassword","encryptedValue","encrypted","pepperId","values","assign","deletedAt","toProfile","comparePassword","candidate","passwordsMatch","classMethods","hasMany","Post","aesHash","bcryptHash","hashPassword","deAesHash","_bcrypt","_crypto","_crypto2","hasher","createHash","update","hashed","digest","passwordhash","saltRounds","hash","currentPepperId","ACCOUNT_ENCRYPT_CURRENT_PEPPER","pepper","algorithm","cipher","createCipher","crypted","final","rawPassword","decipher","createDecipher","decrypted","candidatePassword","candidateHashed","decryptedPass","compare","appraisePostMessage","appraisePostSubject","appraiseAccountId","appraisePasswordErrors","appraisePasswordExtra","appraiseThese","_validator","_owaspPasswordStrengthTest","_owaspPasswordStrengthTest2","emailAddress","messages","isEmpty","isEmail","owaspResults","strong","concat","minLength","maxLength","repeating","needLowercase","needUppercase","needNumber","needCharacter","what","appraised","tested","postMessage","postSubject","edited","BOOLEAN","timestamps","paranoid","belongsTo","_ensureLoggedIn","_ensureLoggedIn2","_passportLocal","_models","_models2","Strategy","usernameField","passwordField","callback","foundAccount","find","where","theAccount","passwordsMatched","accountToReturn","serializeUser","deserializeUser","options","unauthenticatedRedirectURL","redirectTo","allOptions","setReturnTo","isAuthenticated","returnTo","originalUrl","url","redirect","signinUser","logIn","cookie","httpOnly","delete","destroy","logout","clearCookie","getSinglePostEndpoint","getPostsEndpoint","addPostEndpoint","put","updatePostEndpoint","removePostEndpoint","buildGetPostWhere","userAccountId","ttimer","$or","AccountId","createdAt","$lt","whereClause","dir","findAll","include","model","attributes","limit","order","items","posts","itemId","params","postId","sinceDateStamp","$gt","updatedAt","newPost","createdItem","cleanedPost","findOne","thePost","_dotenv","_dotenv2","_requireEnvironmentVariables","_requireEnvironmentVariables2","load"],"mappings":"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","file":"server.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _http = __webpack_require__(1);\n\t\n\tvar _serveFavicon = __webpack_require__(2);\n\t\n\tvar _serveFavicon2 = _interopRequireDefault(_serveFavicon);\n\t\n\tvar _bodyParser = __webpack_require__(3);\n\t\n\tvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\t\n\tvar _express = __webpack_require__(4);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tvar _expressSession = __webpack_require__(5);\n\t\n\tvar _expressSession2 = _interopRequireDefault(_expressSession);\n\t\n\tvar _morgan = __webpack_require__(6);\n\t\n\tvar _morgan2 = _interopRequireDefault(_morgan);\n\t\n\tvar _passport = __webpack_require__(7);\n\t\n\tvar _passport2 = _interopRequireDefault(_passport);\n\t\n\tvar _socket = __webpack_require__(8);\n\t\n\tvar _socket2 = _interopRequireDefault(_socket);\n\t\n\tvar _Timer = __webpack_require__(9);\n\t\n\tvar _Timer2 = _interopRequireDefault(_Timer);\n\t\n\tvar _modules = __webpack_require__(12);\n\t\n\t__webpack_require__(34);\n\t\n\tvar _redisConnect = __webpack_require__(10);\n\t\n\tvar _redisConnect2 = _interopRequireDefault(_redisConnect);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Configurations */\n\t/* Base imports */\n\tvar RedisStore = __webpack_require__(37)(_expressSession2.default);\n\t\n\t/* Main server setup */\n\t\n\t/* Routes */\n\tvar port = process.env.MAIN_SERVER_PORT;\n\tif (!port) {\n\t  port = 3009;\n\t}\n\t\n\tvar app = (0, _express2.default)();\n\tvar server = (0, _http.Server)(app);\n\tvar io = new _socket2.default(server);\n\t\n\t/* Timer setup */\n\tvar triggerTime = function triggerTime(lastTimeStamp) {\n\t  _modules.PostController.getPostsSinceDate(lastTimeStamp).then(function allPosts(newMessages) {\n\t    if (newMessages) {\n\t      io.emit('messages', newMessages);\n\t    }\n\t  });\n\t};\n\t\n\tvar tickTime = function tickTime(now, later) {\n\t  io.emit('tick', now, later);\n\t};\n\t\n\tvar ttimer = new _Timer2.default(5, triggerTime, tickTime); // eslint-disable-line no-unused-vars\n\t\n\t/* Middleware setup */\n\tapp.use((0, _serveFavicon2.default)('build/public/assets/favicon.ico'));\n\tapp.use(function (err, req, res, next) {\n\t  if (res.headersSent) next(err);\n\t  res.status(err.status || port).render('500');\n\t});\n\tapp.use(_express2.default.static('build/public'));\n\tapp.use(_bodyParser2.default.json());\n\tapp.use(_bodyParser2.default.urlencoded({ extended: true }));\n\tvar sessionMiddleware = (0, _expressSession2.default)({\n\t  name: 'ccs',\n\t  secret: 'MmyWTLNNsTi15L8n3iUH8kls',\n\t  resave: true,\n\t  saveUninitialized: false,\n\t  store: new RedisStore({ client: _redisConnect2.default })\n\t});\n\tapp.use(sessionMiddleware);\n\tapp.use(_passport2.default.initialize());\n\tapp.use(_passport2.default.session());\n\tapp.use((0, _morgan2.default)('combined'));\n\t\n\t/* socket setup */\n\tio.use(function ioSessionSetup(socket, next) {\n\t  // Wrap the express middleware\n\t  sessionMiddleware(socket.request, {}, next);\n\t});\n\t\n\t/* API Routes */\n\tapp.use('/api/v1', [_modules.accountRoutes, _modules.authenticationRoutes, _modules.postRoutes]);\n\t\n\t// On socket connection, figure out who's still listening and send the list around.\n\tvar findAndEmitListeners = function findAndEmitListeners() {\n\t  // TODO: this is likely inefficient at large loads\n\t  var listeners = [];\n\t  var guestCounter = 0;\n\t  var clients = Object.keys(io.eio.clients);\n\t\n\t  clients.forEach(function findNames(client) {\n\t    var clientSession = io.eio.clients[client].request.session;\n\t    if (clientSession && clientSession.passport && clientSession.passport.user) {\n\t      listeners.push(clientSession.passport.user.displayName);\n\t    } else {\n\t      guestCounter += 1;\n\t    }\n\t  });\n\t  if (guestCounter > 0) {\n\t    listeners.push(guestCounter + ' guests');\n\t  }\n\t  io.emit('listeners', listeners);\n\t};\n\t\n\t/* Socket options */\n\tio.on('connection', function onConnect(socket) {\n\t  // onConnect(socket)\n\t  console.log('CONNECTION');\n\t  findAndEmitListeners();\n\t  socket.on('nick', function sendNick(name) {\n\t    socket.nick = name; // eslint-disable-line no-param-reassign\n\t    findAndEmitListeners();\n\t  });\n\t});\n\t\n\t// TODO: need a disconnect listener\n\t\n\tapp.get('/', function baseReturn(req, res) {\n\t  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n\t});\n\t\n\tprocess.on('SIGTERM', function () {\n\t  console.log('Closing server.');\n\t  app.close();\n\t});\n\t\n\tapp.on('close', function () {\n\t  console.log('Closing redis.');\n\t  _redisConnect2.default.quit();\n\t});\n\t\n\t/* Start the API Server */\n\t\n\tserver.listen(port, function reportOnListen(error) {\n\t  if (error) {\n\t    console.log('Server ERROR on startup: ' + error);\n\t  } else {\n\t    console.log('Server listening on http://localhost:' + port + '.');\n\t  }\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"serve-favicon\");\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"body-parser\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express-session\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"morgan\");\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"passport\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"socket.io\");\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _redisConnect = __webpack_require__(10);\n\t\n\tvar _redisConnect2 = _interopRequireDefault(_redisConnect);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/* This manages the global timer that releases new messages.\n\t * Really, this should be set on the database? At least have separate timers per 'room'.\n\t * But since we don't have rooms, we don't need that.\n\t */\n\tvar instance = null;\n\t\n\tvar TrancheTimer = function () {\n\t  function TrancheTimer() {\n\t    var timeSpread = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n\t    var triggeredCallback = arguments[1];\n\t    var updateTimeCallback = arguments[2];\n\t\n\t    _classCallCheck(this, TrancheTimer);\n\t\n\t    // If we are a singleton and already registered, return that.\n\t    if (instance) {\n\t      return instance;\n\t    }\n\t    // Set up callbacks and settings\n\t    this.ringCallback = triggeredCallback;\n\t    this.tickTockCallback = updateTimeCallback;\n\t    this.timeSpreadMinutes = timeSpread;\n\t    this.updateTick = 5000; // milliseconds\n\t\n\t    // Set up last time\n\t    this.lastTimestamp = _redisConnect2.default.get('lastTranche');\n\t    if (!this.lastTime) {\n\t      this.setLastTimeToNow();\n\t    }\n\t    this.runner = setInterval(this.tickTock.bind(this), this.updateTick);\n\t    instance = this;\n\t  }\n\t\n\t  _createClass(TrancheTimer, [{\n\t    key: 'setLastTimeToNow',\n\t    value: function setLastTimeToNow() {\n\t      this.lastTimestamp = Date.now();\n\t      _redisConnect2.default.set('lastTranche', this.lastTimestamp);\n\t    }\n\t  }, {\n\t    key: 'tickTock',\n\t    value: function tickTock() {\n\t      var boost = this.timeSpreadMinutes * 60000;\n\t      var triggerTimestamp = this.lastTimestamp + boost;\n\t      var nowTimestamp = Date.now();\n\t      if (triggerTimestamp < nowTimestamp) {\n\t        var lastTimeStamp = this.lastTimestamp;\n\t        this.setLastTimeToNow();\n\t        this.ringCallback(lastTimeStamp);\n\t      }\n\t      this.tickTockCallback(nowTimestamp, triggerTimestamp);\n\t    }\n\t  }]);\n\t\n\t  return TrancheTimer;\n\t}();\n\t\n\texports.default = TrancheTimer;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _redis = __webpack_require__(11);\n\t\n\tvar _redis2 = _interopRequireDefault(_redis);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar REDIS_URL = process.env.REDIS_URL;\n\t\n\t/* Connect to redis */\n\tvar redisClient = _redis2.default.createClient(REDIS_URL);\n\t\n\tredisClient.on('error', function redisErrorReport(err) {\n\t  console.log('Redis connection error ' + err);\n\t});\n\t\n\texports.default = redisClient;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"redis\");\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Account = __webpack_require__(13);\n\t\n\tObject.keys(_Account).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Account[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Authentication = __webpack_require__(26);\n\t\n\tObject.keys(_Authentication).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Authentication[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _Post = __webpack_require__(31);\n\t\n\tObject.keys(_Post).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _Post[key];\n\t    }\n\t  });\n\t});\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.AccountController = exports.accountRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(14);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(15);\n\t\n\tvar AccountController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.accountRoutes = _routes2.default;\n\texports.AccountController = AccountController;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(4);\n\t\n\tvar _controller = __webpack_require__(15);\n\t\n\tvar _Authentication = __webpack_require__(26);\n\t\n\tvar routes = new _express.Router();\n\t\n\troutes.route('/accounts').post(_controller.addAccountEndpoint);\n\t\n\troutes.get('/accounts', (0, _Authentication.ensureLoggedIn)(), _controller.getAccountInfoEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar models = __webpack_require__(16);\n\t\n\tvar Account = models.Account;\n\t\n\t/* Returns either the current account's accountId or, if onBehalfOfId is passed in\n\t *  to the body, it will verify if the current account can act on behalf of the passed\n\t *  in id and return that.\n\t *  @param {object} req - the request object that has a user account attached\n\t *  @returns {string} accountId - the accountId to use in searches.\n\t *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n\t */\n\tvar activeAccountId = function getAccount(req) {\n\t  var currentAccount = req.user;\n\t  var onBehalfOfId = req.body.onBehalfOfId;\n\t  if (onBehalfOfId && onBehalfOfId.length > 0) {\n\t    if (currentAccount && currentAccount.canActOnBehalfOf(onBehalfOfId)) {\n\t      return onBehalfOfId;\n\t    }\n\t  }\n\t  if (req.user && req.user.id) {\n\t    return req.user.id;\n\t  }\n\t  return null;\n\t};\n\t\n\t/* Adds an account to the Accounts database based on the fields passed in.\n\t * Params needed in body:\n\t *   @param {string} email - the email address\n\t *   @param {string} password - the user's password. Must pass owasp tests.\n\t *   @param {string} displayName - the name to display on the users page.\n\t */\n\tvar addAccountEndpoint = function addAccountEndpoint(req, res) {\n\t  var _req$body = req.body,\n\t      email = _req$body.email,\n\t      password = _req$body.password,\n\t      displayName = _req$body.displayName;\n\t  // const newAccount = new Account({ email, password, displayName });\n\t\n\t  var newAccount = Account.build({\n\t    email: email,\n\t    displayName: displayName\n\t  });\n\t  newAccount.setPassword(password).then(function () {\n\t    // eslint-disable-line arrow-body-style\n\t    return newAccount.save();\n\t  }).then(function (createdAccount) {\n\t    req.login(createdAccount, function loginFailed(error) {\n\t      console.log('Failed login after creation: ' + error);\n\t    });\n\t    var cleanedAccount = createdAccount.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully Registered',\n\t      account: cleanedAccount\n\t    });\n\t  }).catch(function (err) {\n\t    // TODO: this only works on mongoose. Have to dig into the err object to see where to pick up.\n\t    if (err.code === 11000) {\n\t      res.statusMessage = 'Account with that email already exists'; // eslint-disable-line no-param-reassign\n\t      res.status(409).end();\n\t      return;\n\t    }\n\t    var errorMessage = 'Account could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    // TODO: Return errors better. The err object has an errors array that could be parsed.\n\t    res.status(422).send(JSON.stringify({ errors: err.message }));\n\t  });\n\t};\n\t\n\t/* Get account info for accountId.\n\t * Params needed in req.body:\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param {number} accountId - Will be pulled from req.user.\n\t *  Uses activeAccountId() to get the search parameters.\n\t */\n\tvar getAccountInfoEndpoint = function getAccountInfoEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var accountId = activeAccountId(req);\n\t  if (!accountId) {\n\t    return res.status(422).json({ success: false, message: 'No accountId provided' });\n\t  }\n\t  Account.findById(accountId).then(function (item) {\n\t    var cleanedItem = item.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      account: cleanedItem\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\tvar updateAccountEndpoint = function updateAccountEndpoint(req, res) {\n\t  res.status(418).json({\n\t    message: 'Brewing'\n\t  });\n\t};\n\t\n\texports.addAccountEndpoint = addAccountEndpoint;\n\texports.updateAccountEndpoint = updateAccountEndpoint;\n\texports.getAccountInfoEndpoint = getAccountInfoEndpoint;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _sequelize = __webpack_require__(17);\n\t\n\tvar _sequelize2 = _interopRequireDefault(_sequelize);\n\t\n\tvar _Account = __webpack_require__(18);\n\t\n\tvar _Account2 = _interopRequireDefault(_Account);\n\t\n\tvar _Post = __webpack_require__(25);\n\t\n\tvar _Post2 = _interopRequireDefault(_Post);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar allConfigs = {\n\t  development: {\n\t    username: 'mdw',\n\t    password: null,\n\t    database: 'calmcomment',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  },\n\t  test: {\n\t    username: 'root',\n\t    password: null,\n\t    database: 'database_test',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  },\n\t  production: {\n\t    username: 'root',\n\t    password: null,\n\t    database: 'database_production',\n\t    host: '127.0.0.1',\n\t    dialect: 'postgres'\n\t  }\n\t};\n\t\n\t/* Set up the general process */\n\tvar env = (\"production\") || 'development';\n\tvar config = allConfigs[env];\n\tvar sequelize = null;\n\tif (process.env.DATABASE_URL) {\n\t  sequelize = new _sequelize2.default(process.env.DATABASE_URL);\n\t} else {\n\t  sequelize = new _sequelize2.default(config.database, config.username, config.password, config);\n\t}\n\tvar db = {};\n\t\n\t/* Connect and log in to postgres */\n\tsequelize.authenticate().then(function () {\n\t  console.log('Success: Connection to Postgres established .');\n\t}, function trapError(err) {\n\t  console.log('FAILURE: Unable to connect to the Postgres database:', err);\n\t});\n\t\n\t/* Create the models\n\t * TODO: This is a manual update nightmare.\n\t */\n\tvar accountModel = (0, _Account2.default)(sequelize, _sequelize2.default);\n\tdb[accountModel.name] = accountModel;\n\tvar postModel = (0, _Post2.default)(sequelize, _sequelize2.default);\n\tdb[postModel.name] = postModel;\n\t\n\t/* Do associations */\n\tObject.keys(db).forEach(function associateThem(modelName) {\n\t  if ('associate' in db[modelName]) {\n\t    db[modelName].associate(db);\n\t  }\n\t});\n\t\n\t/* Push the models to the database */\n\tsequelize.sync() //   .sync({ force: true }) <= removed as this drops the table\n\t.then(function () {\n\t  console.log('Success: Synced models to database.');\n\t}, function trapSyncError(err) {\n\t  console.log('FAILURE: An error occurred while creating the table:', err);\n\t});\n\t\n\tdb.sequelize = sequelize;\n\tdb.Sequelize = _sequelize2.default;\n\t\n\tmodule.exports = db;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"sequelize\");\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _passwordEncryption = __webpack_require__(19);\n\t\n\tvar _appraise = __webpack_require__(22);\n\t\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Account = sequelize.define('Account', {\n\t    displayName: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidDisplayName: function validateDisplayName(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseDisplayName)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      }\n\t    },\n\t    email: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        isValidEmail: function validateEmail(value) {\n\t          var appraisalMessages = (0, _appraise.appraiseEmail)(value);\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(' '));\n\t          }\n\t        }\n\t      },\n\t      unique: true\n\t    },\n\t    encryptedPasswordHash: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        notEmpty: true\n\t      }\n\t    },\n\t    encryptedPasswordPepperId: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false,\n\t      validate: {\n\t        notEmpty: true\n\t      }\n\t    }\n\t  }, {\n\t    instanceMethods: {\n\t      setPassword: function setPassword(password) {\n\t        var self = this;\n\t        return Promise.resolve((0, _appraise.appraisePassword)(password)).then(function checkAppraisal(appraisalMessages) {\n\t          if (appraisalMessages.length > 0) {\n\t            throw new Error(appraisalMessages.join(', '));\n\t          }\n\t          return password;\n\t        }).then(function runHashing(passwordValue) {\n\t          return (0, _passwordEncryption.encryptPassword)(passwordValue);\n\t        }).then(function (encryptedValue) {\n\t          self.encryptedPasswordHash = encryptedValue.encrypted;\n\t          self.encryptedPasswordPepperId = encryptedValue.pepperId;\n\t        }).catch(function (err) {\n\t          throw err;\n\t        });\n\t      },\n\t      toJSON: function stripValues() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.encryptedPasswordHash;\n\t        delete values.encryptedPasswordPepperId;\n\t        delete values.deletedAt;\n\t        return values;\n\t      },\n\t      // TODO: We really need a profile table but this works for now.\n\t      toProfile: function stripForProfile() {\n\t        var values = Object.assign({}, this.get());\n\t        delete values.encryptedPasswordHash;\n\t        delete values.encryptedPasswordPepperId;\n\t        delete values.email;\n\t        delete values.deletedAt;\n\t        return values;\n\t      },\n\t      comparePassword: function comparePassword(candidate) {\n\t        return (0, _passwordEncryption.passwordsMatch)(candidate, this.encryptedPasswordHash, this.encryptedPasswordPepperId);\n\t      }\n\t    },\n\t    classMethods: {\n\t      associate: function associatModesl(models) {\n\t        Account.hasMany(models.Post);\n\t      }\n\t    }\n\t  });\n\t  return Account;\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.passwordsMatch = exports.aesHash = exports.bcryptHash = exports.hashPassword = exports.deAesHash = exports.encryptPassword = undefined;\n\t\n\tvar _bcrypt = __webpack_require__(20);\n\t\n\tvar _crypto = __webpack_require__(21);\n\t\n\tvar _crypto2 = _interopRequireDefault(_crypto);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Hashes the password into a SHA512 hex hash */\n\tvar hashPassword = function hashPassword(password) {\n\t  var hasher = _crypto2.default.createHash('sha512');\n\t  hasher.update(password);\n\t  var hashed = hasher.digest('hex');\n\t  return hashed;\n\t};\n\t\n\t/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n\t * Salt is returned as part of the hash and thus saved.\n\t * Note that this version of bcrypt only takes the first 72 characters.\n\t  */\n\tvar bcryptHash = function bcryptHash(passwordhash) {\n\t  var saltRounds = 10;\n\t  return (0, _bcrypt.hash)(passwordhash, saltRounds);\n\t};\n\t\n\t/* Encrypts the bcrypted string using aes256 using a pepper stored\n\t *   in the environment. This is what should be finally saved.\n\t */\n\tvar aesHash = function aesHash(passwordhash) {\n\t  var currentPepperId = process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER;\n\t  var pepper = process.env[currentPepperId];\n\t  var algorithm = 'aes-256-ctr';\n\t  var cipher = _crypto2.default.createCipher(algorithm, pepper);\n\t  var crypted = cipher.update(passwordhash, 'utf8', 'hex');\n\t  crypted += cipher.final('hex');\n\t  return { encrypted: crypted, pepperId: currentPepperId };\n\t};\n\t\n\t/* Encrypting a password.\n\t   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n\t   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n\t*/\n\tvar encryptPassword = function encryptPassword(rawPassword) {\n\t  return Promise.resolve(rawPassword).then(hashPassword).then(bcryptHash).then(aesHash);\n\t};\n\t\n\t/* Decrypts the encrypted bcrypt hash using aes256 using a pepper stored\n\t *   in the environment. Should use this only with the bcrypted, hashed password.\n\t */\n\tvar deAesHash = function deAesHash(passwordhash, pepperId) {\n\t  var pepper = process.env[pepperId];\n\t  if (!pepper) {\n\t    return new Error('Pepper not found.');\n\t  }\n\t  var algorithm = 'aes-256-ctr';\n\t  var decipher = _crypto2.default.createDecipher(algorithm, pepper);\n\t  var decrypted = decipher.update(passwordhash, 'hex', 'utf8');\n\t  decrypted += decipher.final('utf8');\n\t  return decrypted;\n\t};\n\t\n\t/* Compare passwords.\n\t * Because we are using hashing and encrypting, we have to do that before we compare.\n\t */\n\tvar passwordsMatch = function passwordsMatch(candidatePassword, encryptedPasswordHash, pepperId) {\n\t  // compare the submitted password to encrypted password in database.\n\t  var candidateHashed = hashPassword(candidatePassword);\n\t  var decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n\t  return (0, _bcrypt.compare)(candidateHashed, decryptedPass);\n\t};\n\t\n\texports.encryptPassword = encryptPassword;\n\texports.deAesHash = deAesHash;\n\texports.hashPassword = hashPassword;\n\texports.bcryptHash = bcryptHash;\n\texports.aesHash = aesHash;\n\texports.passwordsMatch = passwordsMatch;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"bcrypt\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"crypto\");\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.appraisePostMessage = exports.appraisePostSubject = exports.appraiseAccountId = exports.appraisePasswordErrors = exports.appraisePasswordExtra = exports.appraisePassword = exports.appraiseDisplayName = exports.appraiseEmail = exports.appraiseThese = undefined;\n\t\n\tvar _validator = __webpack_require__(23);\n\t\n\tvar _owaspPasswordStrengthTest = __webpack_require__(24);\n\t\n\tvar _owaspPasswordStrengthTest2 = _interopRequireDefault(_owaspPasswordStrengthTest);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Is the email valid? Uses the validator library to test.\n\t */\n\tvar appraiseEmail = function appraiseEmail(emailAddress) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(emailAddress)) {\n\t    messages.push('Email address is required.');\n\t  }\n\t  if (!(0, _validator.isEmpty)(emailAddress) && !(0, _validator.isEmail)(emailAddress)) {\n\t    messages.push('Email address does not appear to be valid.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Test for the validity of the displayName.\n\t *  Currently only checks if it's empty.\n\t */\n\tvar appraiseDisplayName = function appraiseDisplayName(displayName) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(displayName)) {\n\t    messages.push('Display name is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Tests a password.\n\t * Must be valid and pass the owasp validation tests.\n\t */\n\tvar appraisePassword = function appraisePassword(password) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(password)) {\n\t    messages.push('Password is required.');\n\t  } else {\n\t    var owaspResults = _owaspPasswordStrengthTest2.default.test(password);\n\t    if (!owaspResults.strong) {\n\t      messages = messages.concat(owaspResults.errors);\n\t    }\n\t  }\n\t  return messages;\n\t};\n\t\n\tvar appraisePasswordErrors = {\n\t  minLength: 0,\n\t  maxLength: 1,\n\t  repeating: 2,\n\t  needLowercase: 3,\n\t  needUppercase: 4,\n\t  needNumber: 5,\n\t  needCharacter: 6\n\t};\n\t\n\t/* A wrapper for awasp tests that returns this\n\t * {\n\t *   errors              : [],\n\t *   failedTests         : [],\n\t *   requiredTestErrors  : [],\n\t *   optionalTestErrors  : [],\n\t *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n\t *   isPassphrase        : false,\n\t *   strong              : true,\n\t *   optionalTestsPassed : 4\n\t * }\n\t */\n\tvar appraisePasswordExtra = function appraisePasswordExtra(password) {\n\t  return _owaspPasswordStrengthTest2.default.test(password);\n\t};\n\t\n\t/* Tests for the presense of an accountID.\n\t *  Only checks if it's empty.\n\t *  TODO: Check if the account actually exists.\n\t */\n\tvar appraiseAccountId = function appraiseAccountId(accountId) {\n\t  var messages = [];\n\t  if ((0, _validator.isEmpty)(accountId)) {\n\t    messages.push('AccountId is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Validates multiple options. Pass in an object with one of the following:\n\t * email: {string} validates an email (or empty}\n\t * displayName; {string} checks for empty\n\t * password: {string} validates a password\n\t * accountId: {string} validates the accountId\n\t * @returns: an object (see validator object below)\n\t */\n\tvar appraiseThese = function appraiseThese(what) {\n\t  var appraised = {\n\t    success: true, // Did all tests pass\n\t    tested: [], // Which tests where done? Check this to make sure things were passed in correctly.\n\t    errors: {} };\n\t  if ('email' in what) {\n\t    appraised.tested.push('email');\n\t    var messages = appraiseEmail(what.email);\n\t    if (messages && messages.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.email = messages;\n\t    }\n\t  }\n\t  if ('password' in what) {\n\t    appraised.tested.push('password');\n\t    var _messages = appraisePassword(what.password);\n\t    if (_messages && _messages.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.password = _messages;\n\t    }\n\t  }\n\t  if ('displayName' in what) {\n\t    appraised.tested.push('displayName');\n\t    var _messages2 = appraiseDisplayName(what.displayName);\n\t    if (_messages2 && _messages2.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.displayName = _messages2;\n\t    }\n\t  }\n\t  if ('accountId' in what) {\n\t    appraised.tested.push('accountId');\n\t    var _messages3 = appraiseAccountId(what.accountId);\n\t    if (_messages3 && _messages3.length > 0) {\n\t      appraised.success = false;\n\t      appraised.errors.accountId = _messages3;\n\t    }\n\t  }\n\t  return appraised;\n\t};\n\t\n\t/* Tests for the presense of a post message.\n\t *  Only checks if it's empty.\n\t *  Here for future functionality.\n\t */\n\tvar appraisePostMessage = function appraisePostMessage(postMessage) {\n\t  var messages = [];\n\t  if (!postMessage || (0, _validator.isEmpty)(postMessage)) {\n\t    messages.push('A message is required.');\n\t  }\n\t  return messages;\n\t};\n\t\n\t/* Tests for the presense of a post subject.\n\t *  Runs no checks.\n\t *  Here for future functionality.\n\t */\n\t/* eslint-disable no-unused-vars */\n\tvar appraisePostSubject = function appraisePostSubject(postSubject) {\n\t  return [];\n\t};\n\t/* eslint-enable no-unused-vars */\n\t\n\texports.appraiseThese = appraiseThese;\n\texports.appraiseEmail = appraiseEmail;\n\texports.appraiseDisplayName = appraiseDisplayName;\n\texports.appraisePassword = appraisePassword;\n\texports.appraisePasswordExtra = appraisePasswordExtra;\n\texports.appraisePasswordErrors = appraisePasswordErrors;\n\texports.appraiseAccountId = appraiseAccountId;\n\texports.appraisePostSubject = appraisePostSubject;\n\texports.appraisePostMessage = appraisePostMessage;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"validator\");\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"owasp-password-strength-test\");\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/* A post is the atomic messages of the user */\n\tmodule.exports = function (sequelize, DataTypes) {\n\t  var Post = sequelize.define('Post', {\n\t    message: {\n\t      type: DataTypes.STRING,\n\t      allowNull: false\n\t    },\n\t    edited: {\n\t      type: DataTypes.BOOLEAN\n\t    }\n\t  }, {\n\t    timestamps: true,\n\t    paranoid: true,\n\t    classMethods: {\n\t      associate: function associateModels(models) {\n\t        Post.belongsTo(models.Account);\n\t      }\n\t    }\n\t  });\n\t  return Post;\n\t};\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.authenticationRoutes = exports.ensureLoggedIn = undefined;\n\t\n\t__webpack_require__(27);\n\t\n\tvar _ensureLoggedIn = __webpack_require__(29);\n\t\n\tvar _ensureLoggedIn2 = _interopRequireDefault(_ensureLoggedIn);\n\t\n\tvar _routes = __webpack_require__(30);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.ensureLoggedIn = _ensureLoggedIn2.default;\n\texports.authenticationRoutes = _routes2.default;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _passportLocal = __webpack_require__(28);\n\t\n\tvar _passport = __webpack_require__(7);\n\t\n\tvar _passport2 = _interopRequireDefault(_passport);\n\t\n\tvar _models = __webpack_require__(16);\n\t\n\tvar _models2 = _interopRequireDefault(_models);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Account = _models2.default.Account;\n\t\n\t/* Configure the local strategy for use by Passport.\n\t *\n\t * The local strategy require a `verify` function which receives the credentials\n\t * (`username` and `password`) submitted by the user.  The function must verify\n\t * that the password is correct and then invoke `callback` with a user object, which\n\t * will be set at `req.user` in route handlers after authentication.\n\t */\n\t_passport2.default.use(new _passportLocal.Strategy({\n\t  usernameField: 'email',\n\t  passwordField: 'password'\n\t}, function snsLocalStrategy(email, password, callback) {\n\t  var foundAccount = null;\n\t  Account.find({ where: { email: email } }).then(function comparePass(theAccount) {\n\t    foundAccount = theAccount;\n\t    return theAccount.comparePassword(password);\n\t  }).then(function returnAccount(passwordsMatched) {\n\t    if (!passwordsMatched) {\n\t      throw new Error('Could not verify account');\n\t    }\n\t    return foundAccount;\n\t  }).then(function returnAccount(accountToReturn) {\n\t    callback(null, accountToReturn);\n\t  }).catch(function catchAuthFailure(err) {\n\t    console.log('Passport authentication failed: Unknown error: ' + err);\n\t    return callback(null, false, { message: 'Could not authenticate account' });\n\t  });\n\t}));\n\t\n\t/* Configure Passport authenticated session persistence.\n\t *\n\t * In order to restore authentication state across HTTP requests, Passport needs\n\t * to serialize users into and deserialize users out of the session.  The\n\t * typical implementation of this is as simple as supplying the user ID when\n\t * serializing, and querying the user record by ID from the database when\n\t * deserializing.\n\t */\n\t_passport2.default.serializeUser(function serializeAccount(account, callback) {\n\t  callback(null, account.id);\n\t});\n\t\n\t_passport2.default.deserializeUser(function deserializeAccount(accountId, callback) {\n\t  Account.findById(accountId).then(function determineAction(theAccount) {\n\t    return callback(null, theAccount);\n\t  }).catch(function noFind(err) {\n\t    return callback(err);\n\t  });\n\t});\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"passport-local\");\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = ensureLoggedIn;\n\t/* Based on here: https://github.com/jaredhanson/connect-ensure-login/blob/master/lib/ensureLoggedIn.js\n\t * Used under MIT license\n\t * I edited it to make it go along with my linter and easier for me to understand.\n\t * Original release notes:\n\t * Ensure that a user is logged in before proceeding to next route middleware.\n\t *\n\t * This middleware ensures that a user is logged in.  If a request is received\n\t * that is unauthenticated, the request will be redirected to a login page (by\n\t * default to `/login`).\n\t *\n\t * Additionally, `returnTo` will be be set in the session to the URL of the\n\t * current request.  After authentication, this value can be used to redirect\n\t * the user to the page that was originally requested.\n\t *\n\t * Options:\n\t *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\n\t *   - `setReturnTo`  set redirectTo in session, defaults to _true_\n\t *\n\t * Examples:\n\t *\n\t *     app.get('/profile',\n\t *       ensureLoggedIn(),\n\t *       function(req, res) { ... });\n\t *\n\t *     app.get('/profile',\n\t *       ensureLoggedIn('/signin'),\n\t *       function(req, res) { ... });\n\t *\n\t *     app.get('/profile',\n\t *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\n\t *       function(req, res) { ... });\n\t *\n\t * @param {Object} options\n\t * @return {Function}\n\t * @api public\n\t */\n\tfunction ensureLoggedIn(options) {\n\t  var unauthenticatedRedirectURL = '/login';\n\t  if (typeof options === 'string') {\n\t    unauthenticatedRedirectURL = options;\n\t  } else if (options && options.redirectTo && options.redirectTo.length > 0) {\n\t    unauthenticatedRedirectURL = options.redirectTo;\n\t  }\n\t  var allOptions = options || {};\n\t\n\t  var setReturnTo = allOptions.setReturnTo === undefined ? true : options.setReturnTo;\n\t\n\t  return function areWeAuthenticated(req, res, next) {\n\t    // eslint-disable-line consistent-return\n\t    if (!req.isAuthenticated || !req.isAuthenticated()) {\n\t      if (setReturnTo && req.session) {\n\t        req.session.returnTo = req.originalUrl || req.url; // eslint-disable-line no-param-reassign\n\t      }\n\t      return res.redirect(unauthenticatedRedirectURL);\n\t    }\n\t    next();\n\t  };\n\t}\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(4);\n\t\n\tvar _passport = __webpack_require__(7);\n\t\n\tvar _passport2 = _interopRequireDefault(_passport);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar routes = new _express.Router();\n\t\n\tfunction signinUser(req, res, next) {\n\t  _passport2.default.authenticate('local', function (err, user) {\n\t    // eslint-disable-line consistent-return\n\t    if (err || !user) {\n\t      res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n\t      res.status(422).end();\n\t      return;\n\t    }\n\t    req.logIn(user, function (error) {\n\t      // eslint-disable-line consistent-return\n\t      if (error) {\n\t        return next(error);\n\t      }\n\t      res.cookie('ccsl', 'y', { httpOnly: false });\n\t\n\t      // you can send a json response instead of redirecting the user\n\t      res.status(201).json({\n\t        success: true,\n\t        message: 'Logged in',\n\t        account: user\n\t      });\n\t    });\n\t  })(req, res, next);\n\t}\n\t\n\troutes.route('/sessions').post(signinUser);\n\t\n\troutes.route('/sessions').delete(function logThemOut(req, res) {\n\t  req.session.destroy();\n\t  req.logout();\n\t  res.clearCookie('ccsl');\n\t  res.status(204).end();\n\t});\n\t\n\t/* Checks if a user is currently authenticated.\n\t * Technically, checks the cookie.\n\t */\n\troutes.route('/sessions').get(function isAuthenticated(req, res) {\n\t  if (!req.isAuthenticated || !req.isAuthenticated()) {\n\t    res.status(204).end();\n\t  }\n\t  res.status(403).end();\n\t});\n\t\n\texports.default = routes;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.PostController = exports.postRoutes = undefined;\n\t\n\tvar _routes = __webpack_require__(32);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _controller = __webpack_require__(33);\n\t\n\tvar PostController = _interopRequireWildcard(_controller);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.postRoutes = _routes2.default;\n\texports.PostController = PostController;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _express = __webpack_require__(4);\n\t\n\tvar _controller = __webpack_require__(33);\n\t\n\tvar _Authentication = __webpack_require__(26);\n\t\n\tvar routes = new _express.Router();\n\t// Get a specific post\n\troutes.get('/posts/:postId', _controller.getSinglePostEndpoint);\n\t// Get all posts\n\troutes.get('/posts', _controller.getPostsEndpoint);\n\t// Add a post\n\troutes.post('/posts', (0, _Authentication.ensureLoggedIn)(), _controller.addPostEndpoint);\n\t// Update a post with the id in the url\n\troutes.put('/posts/:postId', (0, _Authentication.ensureLoggedIn)(), _controller.updatePostEndpoint);\n\t// Update a post with the postId in the body\n\troutes.put('/posts/', (0, _Authentication.ensureLoggedIn)(), _controller.updatePostEndpoint);\n\t// Delete a post\n\troutes.delete('/posts/:postId', (0, _Authentication.ensureLoggedIn)(), _controller.removePostEndpoint);\n\t\n\texports.default = routes;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.removePostEndpoint = exports.updatePostEndpoint = exports.addPostEndpoint = exports.getPostsSinceDate = exports.getSinglePostEndpoint = exports.getPostsEndpoint = undefined;\n\t\n\tvar _Timer = __webpack_require__(9);\n\t\n\tvar _Timer2 = _interopRequireDefault(_Timer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar models = __webpack_require__(16);\n\t\n\tvar Post = models.Post;\n\tvar Account = models.Account;\n\t\n\t/* Builds the where clause for the posts search.\n\t * If there is a user account, looks for all of their posts.\n\t * If not, just filters by date\n\t * TODO: Add some filtering by date/number for pagination\n\t */\n\tvar buildGetPostWhere = function buildGetPostWhere(userAccountId) {\n\t  var ttimer = new _Timer2.default();\n\t\n\t  var lastTime = ttimer.lastTimestamp;\n\t  if (userAccountId) {\n\t    return {\n\t      $or: [{ AccountId: userAccountId }, {\n\t        createdAt: {\n\t          $lt: new Date(lastTime)\n\t        }\n\t      }]\n\t    };\n\t  }\n\t  return {\n\t    createdAt: {\n\t      $lt: new Date(lastTime)\n\t    }\n\t  };\n\t};\n\t\n\t/* Get all posts. Filters by the release date.\n\t */\n\tvar getPostsEndpoint = function getPostsEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var accountId = null;\n\t  if (req.user) {\n\t    accountId = req.user.id;\n\t  }\n\t  var whereClause = buildGetPostWhere(accountId);\n\t  console.log('Where clause');\n\t  console.dir(whereClause);\n\t  Post.findAll({\n\t    where: whereClause,\n\t    include: [{\n\t      model: Account,\n\t      attributes: ['displayName']\n\t    }],\n\t    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId'],\n\t    limit: 30,\n\t    order: [['createdAt', 'DESC']]\n\t  }).then(function (items) {\n\t    if (!items) {\n\t      throw new Error('Post not found');\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      posts: items\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Get a post by id.\n\t *  @param {number} postId in params\n\t *  TODO Does not filter by date or id. This is a hole that someone could exploit to get\n\t *    non-released posts.\n\t */\n\tvar getSinglePostEndpoint = function getSinglePostEndpoint(req, res) {\n\t  // eslint-disable-line consistent-return\n\t  var itemId = req.params.postId;\n\t  if (!itemId) {\n\t    res.status(422).json({ success: false, messages: 'No PostId provided.' });\n\t  }\n\t  Post.find({\n\t    where: { id: itemId },\n\t    include: [{\n\t      model: Account,\n\t      attributes: ['displayName']\n\t    }],\n\t    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId']\n\t  }).then(function (item) {\n\t    if (!item) {\n\t      throw new Error('Post not found');\n\t    }\n\t    res.status(200).json({\n\t      success: true,\n\t      posts: item.toJSON()\n\t    });\n\t  }).catch(function (err) {\n\t    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n\t    res.status(404).end();\n\t  });\n\t};\n\t\n\t/* Get all posts since the datestamp provided. Also gets any posts updated in the time slot.\n\t */\n\tvar getPostsSinceDate = function getPostsSinceDate(sinceDateStamp) {\n\t  // eslint-disable-line consistent-return\n\t  var ttimer = new _Timer2.default();\n\t  var lastTime = ttimer.lastTimestamp;\n\t  return Post.findAll({\n\t    where: {\n\t      createdAt: {\n\t        $lt: new Date(lastTime),\n\t        $gt: new Date(sinceDateStamp)\n\t      },\n\t      updatedAt: {\n\t        $lt: new Date(lastTime),\n\t        $gt: new Date(sinceDateStamp)\n\t      }\n\t    },\n\t    include: [{\n\t      model: Account,\n\t      attributes: ['displayName']\n\t    }],\n\t    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId'],\n\t    limit: 30,\n\t    order: [['createdAt', 'DESC']]\n\t  }).then(function (items) {\n\t    if (!items) {\n\t      throw new Error('Post not found');\n\t    }\n\t    return items;\n\t  }).catch(function (err) {\n\t    // eslint-disable-line arrow-body-style\n\t    return err;\n\t  });\n\t};\n\t\n\t/* Adds a post to the Post database based on the fields passed in.\n\t * Params needed in req.body:\n\t *   @param {string} message - the main message body\n\t *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n\t *      can act on behalf of it.\n\t *  @param {number} accountId - Will be pulled from req.user.\n\t *  Uses activeAccountId() to get the accountId to search for\n\t */\n\tvar addPostEndpoint = function addPostEndpoint(req, res) {\n\t  var accountId = req.user.id;\n\t  if (!accountId) {\n\t    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var newPost = Post.build({\n\t    message: req.body.message,\n\t    AccountId: accountId\n\t  });\n\t  newPost.save().then(function (createdItem) {\n\t    if (!createdItem) {\n\t      throw new Error('Post could not be created');\n\t    }\n\t    var cleanedPost = createdItem.toJSON();\n\t    res.status(201).json({\n\t      success: true,\n\t      message: 'Successfully created post',\n\t      post: cleanedPost\n\t    });\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Post could not be created.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Updates a post\n\t *  @param {string} message - the main message body\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  @param {number} accountId - Will be pulled from req.user.\n\t */\n\tvar updatePostEndpoint = function updatePostEndpoint(req, res) {\n\t  var accountId = req.user.id;\n\t  if (!accountId) {\n\t    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.postId;\n\t  if (req.body.postId) {\n\t    itemId = req.body.postId;\n\t  }\n\t  if (!itemId) {\n\t    res.status(422).json({ success: false, messages: 'No PostId provided.' });\n\t  }\n\t  if (req.body.message.length === 0) {\n\t    res.status(422).json({ success: false, messages: 'Nothing to update.' });\n\t  }\n\t  Post.findOne({\n\t    where: {\n\t      id: itemId,\n\t      AccountId: accountId\n\t    }\n\t  }).then(function updateIt(post) {\n\t    if (!post) {\n\t      throw new Error('Post could not be found to update');\n\t    }\n\t    var thePost = post;\n\t    thePost.message = req.body.message;\n\t    thePost.edited = true;\n\t    return thePost.save();\n\t  }).then(function () {\n\t    res.status(205).json({\n\t      success: true,\n\t      message: 'Successfully updated post'\n\t    });\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Post could not be updated.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\t/* Removes a post (marks the status to 'removed')\n\t * Params needed in req.body:\n\t *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n\t *  @param {number} accountId - Will be pulled from req.user.\n\t */\n\tvar removePostEndpoint = function removePostEndpoint(req, res) {\n\t  var accountId = req.user.id;\n\t  if (!accountId) {\n\t    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  var itemId = req.params.postId;\n\t  if (req.body.postId) {\n\t    itemId = req.body.postId;\n\t  }\n\t  if (!itemId) {\n\t    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  }\n\t  Post.findOne({\n\t    where: {\n\t      id: itemId,\n\t      AccountId: accountId\n\t    }\n\t  }).then(function destroyIt(post) {\n\t    return post.destroy();\n\t  }).then(function () {\n\t    res.status(204).end();\n\t  }).catch(function (err) {\n\t    var errorMessage = 'Post could not be removed.';\n\t    if (err.message) {\n\t      errorMessage = err.message;\n\t    }\n\t    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n\t    res.status(422).end();\n\t  });\n\t};\n\t\n\texports.getPostsEndpoint = getPostsEndpoint;\n\texports.getSinglePostEndpoint = getSinglePostEndpoint;\n\texports.getPostsSinceDate = getPostsSinceDate;\n\texports.addPostEndpoint = addPostEndpoint;\n\texports.updatePostEndpoint = updatePostEndpoint;\n\texports.removePostEndpoint = removePostEndpoint;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _dotenv = __webpack_require__(35);\n\t\n\tvar _dotenv2 = _interopRequireDefault(_dotenv);\n\t\n\tvar _requireEnvironmentVariables = __webpack_require__(36);\n\t\n\tvar _requireEnvironmentVariables2 = _interopRequireDefault(_requireEnvironmentVariables);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* 'As early as possible in your application, require and configure dotenv.'\n\t *   - https://www.npmjs.com/package/dotenv\n\t *\n\t * However, we aren't going to load these in production as it could lead to sloppy deploys.\n\t */\n\tif (false) {\n\t  _dotenv2.default.load();\n\t} else {\n\t  _dotenv2.default.load();\n\t}\n\t\n\t/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n\t *   the process exits with code 400.\n\t * https://github.com/bjoshuanoah/require-environment-variables\n\t */\n\t(0, _requireEnvironmentVariables2.default)(['REDIS_URL', 'DATABASE_URL', 'MAIN_SERVER_PORT', 'ACCOUNT_PEPPER_1', 'ACCOUNT_ENCRYPT_CURRENT_PEPPER', 'IDIER_WORKER_ID']);\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"dotenv\");\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"require-environment-variables\");\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"connect-redis\");\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// server.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6317c88498833f8f6ddc","/* Base imports */\nimport { Server } from 'http';\nimport favicon from 'serve-favicon';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport session from 'express-session';\nimport morgan from 'morgan';\nimport passport from 'passport';\nimport SocketIO from 'socket.io';\nimport TTimer from './modules/Timer';\n/* Routes */\nimport { accountRoutes, authenticationRoutes, postRoutes, PostController } from './modules';\n\n/* Configurations */\nimport '../config/environment';\nimport redisClient from '../config/redisConnect';\n\nconst RedisStore = require('connect-redis')(session);\n\n/* Main server setup */\nlet port = process.env.MAIN_SERVER_PORT;\nif (!port) {\n  port = 3009;\n}\n\nconst app = express();\nconst server = Server(app);\nconst io = new SocketIO(server);\n\n/* Timer setup */\nconst triggerTime = function triggerTime(lastTimeStamp) {\n  PostController.getPostsSinceDate(lastTimeStamp)\n    .then(function allPosts(newMessages) {\n      if (newMessages) {\n        io.emit('messages', newMessages);\n      }\n    });\n};\n\nconst tickTime = function tickTime(now, later) {\n  io.emit('tick', now, later);\n};\n\nconst ttimer = new TTimer(5, triggerTime, tickTime); // eslint-disable-line no-unused-vars\n\n/* Middleware setup */\napp.use(favicon('build/public/assets/favicon.ico'));\napp.use((err, req, res, next) => {\n  if (res.headersSent) next(err);\n  res.status(err.status || port).render('500');\n});\napp.use(express.static('build/public'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\nconst sessionMiddleware = session({\n  name: 'ccs',\n  secret: 'MmyWTLNNsTi15L8n3iUH8kls',\n  resave: true,\n  saveUninitialized: false,\n  store: new RedisStore({ client: redisClient }),\n});\napp.use(sessionMiddleware);\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(morgan('combined'));\n\n/* socket setup */\nio.use(function ioSessionSetup(socket, next) {\n  // Wrap the express middleware\n  sessionMiddleware(socket.request, {}, next);\n});\n\n/* API Routes */\napp.use('/api/v1', [accountRoutes, authenticationRoutes, postRoutes]);\n\n// On socket connection, figure out who's still listening and send the list around.\nconst findAndEmitListeners = function findAndEmitListeners() {\n  // TODO: this is likely inefficient at large loads\n  const listeners = [];\n  let guestCounter = 0;\n  const clients = Object.keys(io.eio.clients);\n\n  clients.forEach(function findNames(client) {\n    const clientSession = io.eio.clients[client].request.session;\n    if (clientSession &&\n      clientSession.passport &&\n      clientSession.passport.user\n    ) {\n      listeners.push(clientSession.passport.user.displayName);\n    } else {\n      guestCounter += 1;\n    }\n  });\n  if (guestCounter > 0) {\n    listeners.push(`${guestCounter} guests`);\n  }\n  io.emit('listeners', listeners);\n};\n\n/* Socket options */\nio.on('connection', function onConnect(socket) { // onConnect(socket)\n  console.log('CONNECTION');\n  findAndEmitListeners();\n  socket.on('nick', function sendNick(name) {\n    socket.nick = name; // eslint-disable-line no-param-reassign\n    findAndEmitListeners();\n  });\n});\n\n// TODO: need a disconnect listener\n\napp.get('/', function baseReturn(req, res) {\n  res.send('Hello - this is the api server. You probably want a more interesting endpoint.');\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('Closing server.');\n  app.close();\n});\n\napp.on('close', () => {\n  console.log('Closing redis.');\n  redisClient.quit();\n});\n\n/* Start the API Server */\n\nserver.listen(port, function reportOnListen(error) {\n  if (error) {\n    console.log(`Server ERROR on startup: ${error}`);\n  } else {\n    console.log(`Server listening on http://localhost:${port}.`);\n  }\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/server.js","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"serve-favicon\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"serve-favicon\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"express-session\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-session\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"morgan\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"morgan\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"passport\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"passport\"\n// module id = 7\n// module chunks = 0","module.exports = require(\"socket.io\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"socket.io\"\n// module id = 8\n// module chunks = 0","import redisClient from '../../../config/redisConnect';\n\n\n/* This manages the global timer that releases new messages.\n * Really, this should be set on the database? At least have separate timers per 'room'.\n * But since we don't have rooms, we don't need that.\n */\nlet instance = null;\n\nclass TrancheTimer {\n  constructor(timeSpread = 5, triggeredCallback, updateTimeCallback) {\n    // If we are a singleton and already registered, return that.\n    if (instance) {\n      return instance;\n    }\n    // Set up callbacks and settings\n    this.ringCallback = triggeredCallback;\n    this.tickTockCallback = updateTimeCallback;\n    this.timeSpreadMinutes = timeSpread;\n    this.updateTick = 5000; // milliseconds\n\n    // Set up last time\n    this.lastTimestamp = redisClient.get('lastTranche');\n    if (!this.lastTime) {\n      this.setLastTimeToNow();\n    }\n    this.runner = setInterval(this.tickTock.bind(this), this.updateTick);\n    instance = this;\n  }\n\n  setLastTimeToNow() {\n    this.lastTimestamp = Date.now();\n    redisClient.set('lastTranche', this.lastTimestamp);\n  }\n\n  tickTock() {\n    const boost = this.timeSpreadMinutes * 60000;\n    const triggerTimestamp = this.lastTimestamp + boost;\n    const nowTimestamp = Date.now();\n    if (triggerTimestamp < nowTimestamp) {\n      const lastTimeStamp = this.lastTimestamp;\n      this.setLastTimeToNow();\n      this.ringCallback(lastTimeStamp);\n    }\n    this.tickTockCallback(nowTimestamp, triggerTimestamp);\n  }\n}\n\nexport default TrancheTimer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Timer/index.js","import redis from 'redis';\n\nconst REDIS_URL = process.env.REDIS_URL;\n\n/* Connect to redis */\nconst redisClient = redis.createClient(REDIS_URL);\n\nredisClient.on('error', function redisErrorReport(err) {\n  console.log(`Redis connection error ${err}`);\n});\n\nexport default redisClient;\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/redisConnect.js","module.exports = require(\"redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"redis\"\n// module id = 11\n// module chunks = 0","export * from './Account';\nexport * from './Authentication';\nexport * from './Post';\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/index.js","import accountRoutes from './routes';\nimport * as AccountController from './controller';\n\nexport { accountRoutes, AccountController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Account/index.js","import { Router } from 'express';\nimport { addAccountEndpoint, getAccountInfoEndpoint } from './controller';\nimport { ensureLoggedIn } from '../Authentication';\n\nconst routes = new Router();\n\nroutes.route('/accounts')\n  .post(addAccountEndpoint);\n\nroutes.get('/accounts', ensureLoggedIn(), getAccountInfoEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Account/routes.js","const models = require('../../models');\n\nconst Account = models.Account;\n\n/* Returns either the current account's accountId or, if onBehalfOfId is passed in\n *  to the body, it will verify if the current account can act on behalf of the passed\n *  in id and return that.\n *  @param {object} req - the request object that has a user account attached\n *  @returns {string} accountId - the accountId to use in searches.\n *   TODO: need to move it to it's own module since we're duplicating it in every controller.\n */\nconst activeAccountId = function getAccount(req) {\n  const currentAccount = req.user;\n  const onBehalfOfId = req.body.onBehalfOfId;\n  if (onBehalfOfId && onBehalfOfId.length > 0) {\n    if (currentAccount && currentAccount.canActOnBehalfOf(onBehalfOfId)) {\n      return onBehalfOfId;\n    }\n  }\n  if (req.user && req.user.id) {\n    return req.user.id;\n  }\n  return null;\n};\n\n/* Adds an account to the Accounts database based on the fields passed in.\n * Params needed in body:\n *   @param {string} email - the email address\n *   @param {string} password - the user's password. Must pass owasp tests.\n *   @param {string} displayName - the name to display on the users page.\n */\nconst addAccountEndpoint = (req, res) => {\n  const { email, password, displayName } = req.body;\n  // const newAccount = new Account({ email, password, displayName });\n  const newAccount = Account.build({\n    email: email,\n    displayName: displayName,\n  });\n  newAccount.setPassword(password)\n    .then(() => { // eslint-disable-line arrow-body-style\n      return newAccount.save();\n    })\n    .then((createdAccount) => {\n      req.login(createdAccount, function loginFailed(error) {\n        console.log(`Failed login after creation: ${error}`);\n      });\n      const cleanedAccount = createdAccount.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully Registered',\n        account: cleanedAccount,\n      });\n    })\n    .catch((err) => {\n      // TODO: this only works on mongoose. Have to dig into the err object to see where to pick up.\n      if (err.code === 11000) {\n        res.statusMessage = 'Account with that email already exists'; // eslint-disable-line no-param-reassign\n        res.status(409).end();\n        return;\n      }\n      let errorMessage = 'Account could not be created.';\n      if (err.message) {\n        errorMessage = err.message.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      // TODO: Return errors better. The err object has an errors array that could be parsed.\n      res.status(422).send(JSON.stringify({ errors: err.message }));\n    });\n};\n\n/* Get account info for accountId.\n * Params needed in req.body:\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the search parameters.\n */\nconst getAccountInfoEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const accountId = activeAccountId(req);\n  if (!accountId) {\n    return res.status(422).json({ success: false, message: 'No accountId provided' });\n  }\n  Account.findById(accountId)\n    .then((item) => {\n      const cleanedItem = item.toJSON();\n      res.status(201).json({\n        success: true,\n        account: cleanedItem,\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\nconst updateAccountEndpoint = (req, res) => {\n  res.status(418).json({\n    message: 'Brewing',\n  });\n};\n\nexport { addAccountEndpoint, updateAccountEndpoint, getAccountInfoEndpoint };\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Account/controller.js","import Sequelize from 'sequelize';\nimport Account from './Account';\nimport Post from './Post';\n\nconst allConfigs = {\n  development: {\n    username: 'mdw',\n    password: null,\n    database: 'calmcomment',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n  test: {\n    username: 'root',\n    password: null,\n    database: 'database_test',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n  production: {\n    username: 'root',\n    password: null,\n    database: 'database_production',\n    host: '127.0.0.1',\n    dialect: 'postgres',\n  },\n};\n\n/* Set up the general process */\nconst env = process.env.NODE_ENV || 'development';\nconst config = allConfigs[env];\nlet sequelize = null;\nif (process.env.DATABASE_URL) {\n  sequelize = new Sequelize(process.env.DATABASE_URL);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\nconst db = {};\n\n/* Connect and log in to postgres */\nsequelize\n  .authenticate()\n  .then(() => {\n    console.log('Success: Connection to Postgres established .');\n  }, function trapError(err) {\n    console.log('FAILURE: Unable to connect to the Postgres database:', err);\n  });\n\n\n/* Create the models\n * TODO: This is a manual update nightmare.\n */\nconst accountModel = Account(sequelize, Sequelize);\ndb[accountModel.name] = accountModel;\nconst postModel = Post(sequelize, Sequelize);\ndb[postModel.name] = postModel;\n\n\n/* Do associations */\nObject.keys(db).forEach(function associateThem(modelName) {\n  if ('associate' in db[modelName]) {\n    db[modelName].associate(db);\n  }\n});\n\n/* Push the models to the database */\nsequelize\n  .sync() //   .sync({ force: true }) <= removed as this drops the table\n  .then(() => {\n    console.log('Success: Synced models to database.');\n  }, function trapSyncError(err) {\n    console.log('FAILURE: An error occurred while creating the table:', err);\n  });\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/models/index.js","module.exports = require(\"sequelize\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"sequelize\"\n// module id = 17\n// module chunks = 0","import { encryptPassword, passwordsMatch } from './passwordEncryption';\nimport { appraisePassword, appraiseEmail, appraiseDisplayName } from '../../shared/helpers/appraise';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Account = sequelize.define(\n    'Account', {\n      displayName: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidDisplayName: function validateDisplayName(value) {\n            const appraisalMessages = appraiseDisplayName(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          isValidEmail: function validateEmail(value) {\n            const appraisalMessages = appraiseEmail(value);\n            if (appraisalMessages.length > 0) {\n              throw new Error(appraisalMessages.join(' '));\n            }\n          },\n        },\n        unique: true,\n      },\n      encryptedPasswordHash: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: true,\n        },\n      },\n      encryptedPasswordPepperId: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        validate: {\n          notEmpty: true,\n        },\n      },\n    },\n    {\n      instanceMethods: {\n        setPassword: function setPassword(password) {\n          const self = this;\n          return Promise.resolve(appraisePassword(password))\n            .then(function checkAppraisal(appraisalMessages) {\n              if (appraisalMessages.length > 0) {\n                throw new Error(appraisalMessages.join(', '));\n              }\n              return password;\n            })\n            .then(function runHashing(passwordValue) {\n              return encryptPassword(passwordValue);\n            })\n            .then((encryptedValue) => {\n              self.encryptedPasswordHash = encryptedValue.encrypted;\n              self.encryptedPasswordPepperId = encryptedValue.pepperId;\n            })\n            .catch((err) => {\n              throw err;\n            });\n        },\n        toJSON: function stripValues() {\n          const values = Object.assign({}, this.get());\n          delete values.encryptedPasswordHash;\n          delete values.encryptedPasswordPepperId;\n          delete values.deletedAt;\n          return values;\n        },\n        // TODO: We really need a profile table but this works for now.\n        toProfile: function stripForProfile() {\n          const values = Object.assign({}, this.get());\n          delete values.encryptedPasswordHash;\n          delete values.encryptedPasswordPepperId;\n          delete values.email;\n          delete values.deletedAt;\n          return values;\n        },\n        comparePassword(candidate) {\n          return passwordsMatch(\n            candidate,\n            this.encryptedPasswordHash,\n            this.encryptedPasswordPepperId,\n          );\n        },\n      },\n      classMethods: {\n        associate: function associatModesl(models) {\n          Account.hasMany(models.Post);\n        },\n      },\n    },\n  );\n  return Account;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/models/Account.js","import { compare, hash } from 'bcrypt';\nimport crypto from 'crypto';\n\n/* Hashes the password into a SHA512 hex hash */\nconst hashPassword = function hashPassword(password) {\n  const hasher = crypto.createHash('sha512');\n  hasher.update(password);\n  const hashed = hasher.digest('hex');\n  return hashed;\n};\n\n/* Bcrypts a string (expects a hash) with 10 rounds and a per user salt\n * Salt is returned as part of the hash and thus saved.\n * Note that this version of bcrypt only takes the first 72 characters.\n  */\nconst bcryptHash = function bcryptHash(passwordhash) {\n  const saltRounds = 10;\n  return hash(passwordhash, saltRounds);\n};\n\n/* Encrypts the bcrypted string using aes256 using a pepper stored\n *   in the environment. This is what should be finally saved.\n */\nconst aesHash = function aesHash(passwordhash) {\n  const currentPepperId = process.env.ACCOUNT_ENCRYPT_CURRENT_PEPPER;\n  const pepper = process.env[currentPepperId];\n  const algorithm = 'aes-256-ctr';\n  const cipher = crypto.createCipher(algorithm, pepper);\n  let crypted = cipher.update(passwordhash, 'utf8', 'hex');\n  crypted += cipher.final('hex');\n  return { encrypted: crypted, pepperId: currentPepperId };\n};\n\n/* Encrypting a password.\n   Follows dropbox's pattern of hashing, bcrypting, then encrypting.\n   Seems safer: https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/\n*/\nconst encryptPassword = function encryptPassword(rawPassword) {\n  return Promise.resolve(rawPassword)\n  .then(hashPassword)\n  .then(bcryptHash)\n  .then(aesHash);\n};\n\n/* Decrypts the encrypted bcrypt hash using aes256 using a pepper stored\n *   in the environment. Should use this only with the bcrypted, hashed password.\n */\nconst deAesHash = function deAesHash(passwordhash, pepperId) {\n  const pepper = process.env[pepperId];\n  if (!pepper) {\n    return new Error('Pepper not found.');\n  }\n  const algorithm = 'aes-256-ctr';\n  const decipher = crypto.createDecipher(algorithm, pepper);\n  let decrypted = decipher.update(passwordhash, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n};\n\n\n/* Compare passwords.\n * Because we are using hashing and encrypting, we have to do that before we compare.\n */\nconst passwordsMatch = function passwordsMatch(\n  candidatePassword,\n  encryptedPasswordHash,\n  pepperId,\n  ) {\n  // compare the submitted password to encrypted password in database.\n  const candidateHashed = hashPassword(candidatePassword);\n  const decryptedPass = deAesHash(encryptedPasswordHash, pepperId);\n  return compare(candidateHashed, decryptedPass);\n};\n\nexport { encryptPassword, deAesHash, hashPassword, bcryptHash, aesHash, passwordsMatch };\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/models/passwordEncryption.js","module.exports = require(\"bcrypt\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bcrypt\"\n// module id = 20\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 21\n// module chunks = 0","import { isEmail, isEmpty } from 'validator';\nimport owasp from 'owasp-password-strength-test';\n\n/* Is the email valid? Uses the validator library to test.\n */\nconst appraiseEmail = function appraiseEmail(emailAddress) {\n  const messages = [];\n  if (isEmpty(emailAddress)) {\n    messages.push('Email address is required.');\n  }\n  if (!isEmpty(emailAddress) && !isEmail(emailAddress)) {\n    messages.push('Email address does not appear to be valid.');\n  }\n  return messages;\n};\n\n/* Test for the validity of the displayName.\n *  Currently only checks if it's empty.\n */\nconst appraiseDisplayName = function appraiseDisplayName(displayName) {\n  const messages = [];\n  if (isEmpty(displayName)) {\n    messages.push('Display name is required.');\n  }\n  return messages;\n};\n\n/* Tests a password.\n * Must be valid and pass the owasp validation tests.\n */\nconst appraisePassword = function appraisePassword(password) {\n  let messages = [];\n  if (isEmpty(password)) {\n    messages.push('Password is required.');\n  } else {\n    const owaspResults = owasp.test(password);\n    if (!owaspResults.strong) {\n      messages = messages.concat(owaspResults.errors);\n    }\n  }\n  return messages;\n};\n\nconst appraisePasswordErrors = {\n  minLength: 0,\n  maxLength: 1,\n  repeating: 2,\n  needLowercase: 3,\n  needUppercase: 4,\n  needNumber: 5,\n  needCharacter: 6,\n};\n\n/* A wrapper for awasp tests that returns this\n * {\n *   errors              : [],\n *   failedTests         : [],\n *   requiredTestErrors  : [],\n *   optionalTestErrors  : [],\n *   passedTests         : [ 0, 1, 2, 3, 4, 5, 6 ],\n *   isPassphrase        : false,\n *   strong              : true,\n *   optionalTestsPassed : 4\n * }\n */\nconst appraisePasswordExtra = function appraisePasswordExtra(password) {\n  return owasp.test(password);\n};\n\n/* Tests for the presense of an accountID.\n *  Only checks if it's empty.\n *  TODO: Check if the account actually exists.\n */\nconst appraiseAccountId = function appraiseAccountId(accountId) {\n  const messages = [];\n  if (isEmpty(accountId)) {\n    messages.push('AccountId is required.');\n  }\n  return messages;\n};\n\n/* Validates multiple options. Pass in an object with one of the following:\n * email: {string} validates an email (or empty}\n * displayName; {string} checks for empty\n * password: {string} validates a password\n * accountId: {string} validates the accountId\n * @returns: an object (see validator object below)\n */\nconst appraiseThese = function appraiseThese(what) {\n  const appraised = {\n    success: true,  // Did all tests pass\n    tested: [],  // Which tests where done? Check this to make sure things were passed in correctly.\n    errors: {},  // Error output from the sub-testers as objects.\n  };\n  if ('email' in what) {\n    appraised.tested.push('email');\n    const messages = appraiseEmail(what.email);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.email = messages;\n    }\n  }\n  if ('password' in what) {\n    appraised.tested.push('password');\n    const messages = appraisePassword(what.password);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.password = messages;\n    }\n  }\n  if ('displayName' in what) {\n    appraised.tested.push('displayName');\n    const messages = appraiseDisplayName(what.displayName);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.displayName = messages;\n    }\n  }\n  if ('accountId' in what) {\n    appraised.tested.push('accountId');\n    const messages = appraiseAccountId(what.accountId);\n    if (messages && messages.length > 0) {\n      appraised.success = false;\n      appraised.errors.accountId = messages;\n    }\n  }\n  return appraised;\n};\n\n/* Tests for the presense of a post message.\n *  Only checks if it's empty.\n *  Here for future functionality.\n */\nconst appraisePostMessage = function appraisePostMessage(postMessage) {\n  const messages = [];\n  if (!postMessage || isEmpty(postMessage)) {\n    messages.push('A message is required.');\n  }\n  return messages;\n};\n\n/* Tests for the presense of a post subject.\n *  Runs no checks.\n *  Here for future functionality.\n */\n/* eslint-disable no-unused-vars */\nconst appraisePostSubject = function appraisePostSubject(postSubject) {\n  return [];\n};\n/* eslint-enable no-unused-vars */\n\nexport {\n  appraiseThese,\n  appraiseEmail,\n  appraiseDisplayName,\n  appraisePassword,\n  appraisePasswordExtra,\n  appraisePasswordErrors,\n  appraiseAccountId,\n  appraisePostSubject,\n  appraisePostMessage,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/helpers/appraise.js","module.exports = require(\"validator\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"validator\"\n// module id = 23\n// module chunks = 0","module.exports = require(\"owasp-password-strength-test\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"owasp-password-strength-test\"\n// module id = 24\n// module chunks = 0","/* A post is the atomic messages of the user */\nmodule.exports = (sequelize, DataTypes) => {\n  const Post = sequelize.define(\n    'Post', {\n      message: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      edited: {\n        type: DataTypes.BOOLEAN,\n      },\n    },\n    {\n      timestamps: true,\n      paranoid: true,\n      classMethods: {\n        associate: function associateModels(models) {\n          Post.belongsTo(models.Account);\n        },\n      },\n    },\n  );\n  return Post;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/models/Post.js","import './passportConfigure';\nimport ensureLoggedIn from './ensureLoggedIn';\nimport authenticationRoutes from './routes';\n\nexport { ensureLoggedIn, authenticationRoutes };\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Authentication/index.js","import { Strategy } from 'passport-local';\nimport passport from 'passport';\nimport models from '../../models';\n\nconst Account = models.Account;\n\n/* Configure the local strategy for use by Passport.\n *\n * The local strategy require a `verify` function which receives the credentials\n * (`username` and `password`) submitted by the user.  The function must verify\n * that the password is correct and then invoke `callback` with a user object, which\n * will be set at `req.user` in route handlers after authentication.\n */\npassport.use(new Strategy(\n  {\n    usernameField: 'email',\n    passwordField: 'password',\n  },\n  function snsLocalStrategy(email, password, callback) {\n    let foundAccount = null;\n    Account.find({ where: { email: email } })\n      .then(function comparePass(theAccount) {\n        foundAccount = theAccount;\n        return theAccount.comparePassword(password);\n      })\n      .then(function returnAccount(passwordsMatched) {\n        if (!passwordsMatched) {\n          throw new Error('Could not verify account');\n        }\n        return foundAccount;\n      })\n      .then(function returnAccount(accountToReturn) {\n        callback(null, accountToReturn);\n      })\n      .catch(function catchAuthFailure(err) {\n        console.log(`Passport authentication failed: Unknown error: ${err}`);\n        return callback(null, false, { message: 'Could not authenticate account' });\n      });\n  }));\n\n\n/* Configure Passport authenticated session persistence.\n *\n * In order to restore authentication state across HTTP requests, Passport needs\n * to serialize users into and deserialize users out of the session.  The\n * typical implementation of this is as simple as supplying the user ID when\n * serializing, and querying the user record by ID from the database when\n * deserializing.\n */\npassport.serializeUser(function serializeAccount(account, callback) {\n  callback(null, account.id);\n});\n\npassport.deserializeUser(function deserializeAccount(accountId, callback) {\n  Account.findById(accountId)\n  .then(function determineAction(theAccount) {\n    return callback(null, theAccount);\n  })\n  .catch(function noFind(err) {\n    return callback(err);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Authentication/passportConfigure.js","module.exports = require(\"passport-local\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"passport-local\"\n// module id = 28\n// module chunks = 0","/* Based on here: https://github.com/jaredhanson/connect-ensure-login/blob/master/lib/ensureLoggedIn.js\n * Used under MIT license\n * I edited it to make it go along with my linter and easier for me to understand.\n * Original release notes:\n * Ensure that a user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that a user is logged in.  If a request is received\n * that is unauthenticated, the request will be redirected to a login page (by\n * default to `/login`).\n *\n * Additionally, `returnTo` will be be set in the session to the URL of the\n * current request.  After authentication, this value can be used to redirect\n * the user to the page that was originally requested.\n *\n * Options:\n *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\n *   - `setReturnTo`  set redirectTo in session, defaults to _true_\n *\n * Examples:\n *\n *     app.get('/profile',\n *       ensureLoggedIn(),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn('/signin'),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nexport default function ensureLoggedIn(options) {\n  let unauthenticatedRedirectURL = '/login';\n  if (typeof options === 'string') {\n    unauthenticatedRedirectURL = options;\n  } else if (options && options.redirectTo && options.redirectTo.length > 0) {\n    unauthenticatedRedirectURL = options.redirectTo;\n  }\n  const allOptions = options || {};\n\n  const setReturnTo = (allOptions.setReturnTo === undefined) ? true : options.setReturnTo;\n\n  return function areWeAuthenticated(req, res, next) { // eslint-disable-line consistent-return\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      if (setReturnTo && req.session) {\n        req.session.returnTo = req.originalUrl || req.url; // eslint-disable-line no-param-reassign\n      }\n      return res.redirect(unauthenticatedRedirectURL);\n    }\n    next();\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Authentication/ensureLoggedIn.js","import { Router } from 'express';\nimport passport from 'passport';\n\nconst routes = new Router();\n\nfunction signinUser(req, res, next) {\n  passport.authenticate('local', (err, user) => { // eslint-disable-line consistent-return\n    if (err || !user) {\n      res.statusMessage = 'Could not log in with that email and password combination.'; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n      return;\n    }\n    req.logIn(user, (error) => { // eslint-disable-line consistent-return\n      if (error) {\n        return next(error);\n      }\n      res.cookie('ccsl', 'y', { httpOnly: false });\n\n      // you can send a json response instead of redirecting the user\n      res.status(201).json({\n        success: true,\n        message: 'Logged in',\n        account: user,\n      });\n    });\n  })(req, res, next);\n}\n\nroutes.route('/sessions')\n  .post(signinUser);\n\nroutes.route('/sessions')\n  .delete(function logThemOut(req, res) {\n    req.session.destroy();\n    req.logout();\n    res.clearCookie('ccsl');\n    res.status(204).end();\n  });\n\n/* Checks if a user is currently authenticated.\n * Technically, checks the cookie.\n */\nroutes.route('/sessions')\n  .get(function isAuthenticated(req, res) {\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      res.status(204).end();\n    }\n    res.status(403).end();\n  });\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Authentication/routes.js","import postRoutes from './routes';\nimport * as PostController from './controller';\n\nexport { postRoutes, PostController };\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Post/index.js","import { Router } from 'express';\nimport {\n  getPostsEndpoint,\n  getSinglePostEndpoint,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n} from './controller';\nimport { ensureLoggedIn } from '../Authentication';\n\nconst routes = new Router();\n// Get a specific post\nroutes.get('/posts/:postId', getSinglePostEndpoint);\n// Get all posts\nroutes.get('/posts', getPostsEndpoint);\n// Add a post\nroutes.post('/posts', ensureLoggedIn(), addPostEndpoint);\n// Update a post with the id in the url\nroutes.put('/posts/:postId', ensureLoggedIn(), updatePostEndpoint);\n// Update a post with the postId in the body\nroutes.put('/posts/', ensureLoggedIn(), updatePostEndpoint);\n// Delete a post\nroutes.delete('/posts/:postId', ensureLoggedIn(), removePostEndpoint);\n\nexport default routes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Post/routes.js","import TTimer from '../Timer';\n\nconst models = require('../../models');\n\nconst Post = models.Post;\nconst Account = models.Account;\n\n/* Builds the where clause for the posts search.\n * If there is a user account, looks for all of their posts.\n * If not, just filters by date\n * TODO: Add some filtering by date/number for pagination\n */\nconst buildGetPostWhere = (userAccountId) => {\n  const ttimer = new TTimer();\n\n  const lastTime = ttimer.lastTimestamp;\n  if (userAccountId) {\n    return ({\n      $or: [\n        { AccountId: userAccountId },\n        {\n          createdAt: {\n            $lt: new Date(lastTime),\n          },\n        },\n      ],\n    });\n  }\n  return ({\n    createdAt: {\n      $lt: new Date(lastTime),\n    },\n  });\n};\n\n/* Get all posts. Filters by the release date.\n */\nconst getPostsEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  let accountId = null;\n  if (req.user) {\n    accountId = req.user.id;\n  }\n  const whereClause = buildGetPostWhere(accountId);\n  console.log('Where clause');\n  console.dir(whereClause);\n  Post.findAll({\n    where: whereClause,\n    include: [{\n      model: Account,\n      attributes: ['displayName'],\n    }],\n    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId'],\n    limit: 30,\n    order: [\n      ['createdAt', 'DESC'],\n    ],\n  })\n  .then((items) => {\n    if (!items) {\n      throw new Error('Post not found');\n    }\n    res.status(200).json({\n      success: true,\n      posts: items,\n    });\n  })\n  .catch((err) => {\n    res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n    res.status(404).end();\n  });\n};\n\n/* Get a post by id.\n *  @param {number} postId in params\n *  TODO Does not filter by date or id. This is a hole that someone could exploit to get\n *    non-released posts.\n */\nconst getSinglePostEndpoint = (req, res) => { // eslint-disable-line consistent-return\n  const itemId = req.params.postId;\n  if (!itemId) {\n    res.status(422).json({ success: false, messages: 'No PostId provided.' });\n  }\n  Post.find(\n    {\n      where: { id: itemId },\n      include: [{\n        model: Account,\n        attributes: ['displayName'],\n      }],\n      attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId'],\n    })\n    .then((item) => {\n      if (!item) {\n        throw new Error('Post not found');\n      }\n      res.status(200).json({\n        success: true,\n        posts: item.toJSON(),\n      });\n    })\n    .catch((err) => {\n      res.statusMessage = err.message; // eslint-disable-line no-param-reassign\n      res.status(404).end();\n    });\n};\n\n/* Get all posts since the datestamp provided. Also gets any posts updated in the time slot.\n */\nconst getPostsSinceDate = (sinceDateStamp) => { // eslint-disable-line consistent-return\n  const ttimer = new TTimer();\n  const lastTime = ttimer.lastTimestamp;\n  return Post.findAll({\n    where: {\n      createdAt: {\n        $lt: new Date(lastTime),\n        $gt: new Date(sinceDateStamp),\n      },\n      updatedAt: {\n        $lt: new Date(lastTime),\n        $gt: new Date(sinceDateStamp),\n      },\n    },\n    include: [{\n      model: Account,\n      attributes: ['displayName'],\n    }],\n    attributes: ['id', 'message', 'edited', 'createdAt', 'updatedAt', 'AccountId'],\n    limit: 30,\n    order: [\n      ['createdAt', 'DESC'],\n    ],\n  })\n  .then((items) => {\n    if (!items) {\n      throw new Error('Post not found');\n    }\n    return items;\n  })\n  .catch((err) => { // eslint-disable-line arrow-body-style\n    return err;\n  });\n};\n\n\n/* Adds a post to the Post database based on the fields passed in.\n * Params needed in req.body:\n *   @param {string} message - the main message body\n *   @param (number=} onBehalfOfId - (optional) The accountId to act on behalf of if current account\n *      can act on behalf of it.\n *  @param {number} accountId - Will be pulled from req.user.\n *  Uses activeAccountId() to get the accountId to search for\n */\nconst addPostEndpoint = (req, res) => {\n  const accountId = req.user.id;\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  const newPost = Post.build({\n    message: req.body.message,\n    AccountId: accountId,\n  });\n  newPost.save()\n    .then((createdItem) => {\n      if (!createdItem) {\n        throw new Error('Post could not be created');\n      }\n      const cleanedPost = createdItem.toJSON();\n      res.status(201).json({\n        success: true,\n        message: 'Successfully created post',\n        post: cleanedPost,\n      });\n    })\n    .catch((err) => {\n      let errorMessage = 'Post could not be created.';\n      if (err.message) {\n        errorMessage = err.message;\n      }\n      res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n      res.status(422).end();\n    });\n};\n\n/* Updates a post\n *  @param {string} message - the main message body\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n */\nconst updatePostEndpoint = (req, res) => {\n  const accountId = req.user.id;\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.status(422).json({ success: false, messages: 'No PostId provided.' });\n  }\n  if (req.body.message.length === 0) {\n    res.status(422).json({ success: false, messages: 'Nothing to update.' });\n  }\n  Post.findOne(\n    {\n      where: {\n        id: itemId,\n        AccountId: accountId,\n      },\n    })\n  .then(function updateIt(post) {\n    if (!post) {\n      throw new Error('Post could not be found to update');\n    }\n    const thePost = post;\n    thePost.message = req.body.message;\n    thePost.edited = true;\n    return thePost.save();\n  })\n  .then(() => {\n    res.status(205).json({\n      success: true,\n      message: 'Successfully updated post',\n    });\n  })\n  .catch((err) => {\n    let errorMessage = 'Post could not be updated.';\n    if (err.message) {\n      errorMessage = err.message;\n    }\n    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n};\n\n\n/* Removes a post (marks the status to 'removed')\n * Params needed in req.body:\n *  @param (number) postId - Will be pulled from req.params or req.body (body takes priority)\n *  @param {number} accountId - Will be pulled from req.user.\n */\nconst removePostEndpoint = (req, res) => {\n  const accountId = req.user.id;\n  if (!accountId) {\n    res.statusMessage = 'No accountId provided'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  let itemId = req.params.postId;\n  if (req.body.postId) {\n    itemId = req.body.postId;\n  }\n  if (!itemId) {\n    res.statusMessage = 'No postId provided.'; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  }\n  Post.findOne(\n    {\n      where: {\n        id: itemId,\n        AccountId: accountId,\n      },\n    })\n  .then(function destroyIt(post) {\n    return post.destroy();\n  })\n  .then(() => {\n    res.status(204).end();\n  })\n  .catch((err) => {\n    let errorMessage = 'Post could not be removed.';\n    if (err.message) {\n      errorMessage = err.message;\n    }\n    res.statusMessage = errorMessage; // eslint-disable-line no-param-reassign\n    res.status(422).end();\n  });\n};\n\nexport {\n  getPostsEndpoint,\n  getSinglePostEndpoint,\n  getPostsSinceDate,\n  addPostEndpoint,\n  updatePostEndpoint,\n  removePostEndpoint,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/modules/Post/controller.js","import dotenv from 'dotenv';\nimport requireEnv from 'require-environment-variables';\n\n/* 'As early as possible in your application, require and configure dotenv.'\n *   - https://www.npmjs.com/package/dotenv\n *\n * However, we aren't going to load these in production as it could lead to sloppy deploys.\n */\nif (process.env.NODE_ENV && process.env.NODE_ENV !== 'production') {\n  dotenv.load();\n} else {\n  dotenv.load();\n}\n\n/* If any of the environment variables(process.env.REDIS_URL) don't exist,\n *   the process exits with code 400.\n * https://github.com/bjoshuanoah/require-environment-variables\n */\nrequireEnv([\n  'REDIS_URL',\n  'DATABASE_URL',\n  'MAIN_SERVER_PORT',\n  'ACCOUNT_PEPPER_1',\n  'ACCOUNT_ENCRYPT_CURRENT_PEPPER',\n  'IDIER_WORKER_ID',\n]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/config/environment.js","module.exports = require(\"dotenv\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dotenv\"\n// module id = 35\n// module chunks = 0","module.exports = require(\"require-environment-variables\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"require-environment-variables\"\n// module id = 36\n// module chunks = 0","module.exports = require(\"connect-redis\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"connect-redis\"\n// module id = 37\n// module chunks = 0"],"sourceRoot":""}